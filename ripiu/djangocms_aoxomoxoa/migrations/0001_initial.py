# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-03-19 00:04
from __future__ import unicode_literals

import colorfield.fields
import djangocms_attributes_field.fields

import django.core.validators
import django.db.models.deletion
from django.db import models, migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('filer', '0007_auto_20161016_1055'),
        ('cms', '0018_pagenode'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarouselPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_carouselplugin', serialize=False, to='cms.CMSPlugin')),
                ('tile_height', models.PositiveSmallIntegerField(default=150, verbose_name='tile height')),
                ('tile_width', models.PositiveSmallIntegerField(default=180, verbose_name='tile height')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_carousel_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='The align of the carousel.', max_length=6, verbose_name='align')),
                ('theme_carousel_offset', models.PositiveSmallIntegerField(default=0, help_text='The offset of the carousel from the align sides.', verbose_name='offset')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('carousel_autoplay', models.BooleanField(default=True, help_text='Autoplay of the carousel on start.', verbose_name='carousel autoplay')),
                ('carousel_autoplay_direction', models.CharField(choices=[('left', 'Left'), ('right', 'Right')], default='right', help_text='Autoplay direction.', max_length=6, verbose_name='scroll easing')),
                ('carousel_autoplay_pause_onhover', models.BooleanField(default=True, help_text='Pause the autoplay on mouse over.', verbose_name='pause on hover')),
                ('carousel_autoplay_timeout', models.PositiveSmallIntegerField(default=3000, verbose_name='autoplay timeout')),
                ('carousel_navigation_numtiles', models.PositiveSmallIntegerField(default=3, help_text='Number of tiles to scroll when user clicks on next/prev button.', verbose_name='navigation numtiles')),
                ('carousel_padding', models.PositiveSmallIntegerField(default=8, help_text='Padding at the sides of the carousel.', verbose_name='padding')),
                ('carousel_scroll_duration', models.PositiveSmallIntegerField(default=500, help_text='Duration of scrolling to tile.', verbose_name='scroll duration')),
                ('carousel_scroll_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutCubic', help_text='Easing of scrolling to tile animation.', max_length=17, verbose_name='scroll easing')),
                ('carousel_space_between_tiles', models.PositiveSmallIntegerField(default=20, verbose_name='space between tiles')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('theme_navigation_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='The align of the navigation.', max_length=6, verbose_name='navigation align')),
                ('theme_navigation_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='horizontal offset')),
                ('theme_space_between_arrows', models.PositiveSmallIntegerField(default=5, help_text='The space between arrows in the navigation.', verbose_name='space between arrows')),
                ('theme_enable_navigation', models.BooleanField(default=True, verbose_name='enable navigation')),
                ('theme_navigation_enable_play', models.BooleanField(default=True, help_text='enable / disable the play button of the navigation.', verbose_name='enable play')),
                ('theme_navigation_margin', models.PositiveSmallIntegerField(default=20, help_text='The space between the carousel and the navigation.', verbose_name='margin')),
                ('theme_navigation_position', models.CharField(choices=[('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The vertical position of the navigation reative to the carousel.', max_length=6, verbose_name='position')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=0, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=True, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=True, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carousel_unite_plugins_full', related_query_name='carousel_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Carousel plugin',
                'verbose_name_plural': 'Carousel plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='CarouselSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tile_height', models.PositiveSmallIntegerField(default=150, verbose_name='tile height')),
                ('tile_width', models.PositiveSmallIntegerField(default=180, verbose_name='tile height')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_carousel_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='The align of the carousel.', max_length=6, verbose_name='align')),
                ('theme_carousel_offset', models.PositiveSmallIntegerField(default=0, help_text='The offset of the carousel from the align sides.', verbose_name='offset')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('carousel_autoplay', models.BooleanField(default=True, help_text='Autoplay of the carousel on start.', verbose_name='carousel autoplay')),
                ('carousel_autoplay_direction', models.CharField(choices=[('left', 'Left'), ('right', 'Right')], default='right', help_text='Autoplay direction.', max_length=6, verbose_name='scroll easing')),
                ('carousel_autoplay_pause_onhover', models.BooleanField(default=True, help_text='Pause the autoplay on mouse over.', verbose_name='pause on hover')),
                ('carousel_autoplay_timeout', models.PositiveSmallIntegerField(default=3000, verbose_name='autoplay timeout')),
                ('carousel_navigation_numtiles', models.PositiveSmallIntegerField(default=3, help_text='Number of tiles to scroll when user clicks on next/prev button.', verbose_name='navigation numtiles')),
                ('carousel_padding', models.PositiveSmallIntegerField(default=8, help_text='Padding at the sides of the carousel.', verbose_name='padding')),
                ('carousel_scroll_duration', models.PositiveSmallIntegerField(default=500, help_text='Duration of scrolling to tile.', verbose_name='scroll duration')),
                ('carousel_scroll_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutCubic', help_text='Easing of scrolling to tile animation.', max_length=17, verbose_name='scroll easing')),
                ('carousel_space_between_tiles', models.PositiveSmallIntegerField(default=20, verbose_name='space between tiles')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('theme_navigation_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='The align of the navigation.', max_length=6, verbose_name='navigation align')),
                ('theme_navigation_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='horizontal offset')),
                ('theme_space_between_arrows', models.PositiveSmallIntegerField(default=5, help_text='The space between arrows in the navigation.', verbose_name='space between arrows')),
                ('theme_enable_navigation', models.BooleanField(default=True, verbose_name='enable navigation')),
                ('theme_navigation_enable_play', models.BooleanField(default=True, help_text='enable / disable the play button of the navigation.', verbose_name='enable play')),
                ('theme_navigation_margin', models.PositiveSmallIntegerField(default=20, help_text='The space between the carousel and the navigation.', verbose_name='margin')),
                ('theme_navigation_position', models.CharField(choices=[('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The vertical position of the navigation reative to the carousel.', max_length=6, verbose_name='position')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=0, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=True, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=True, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Carousel unite options',
                'verbose_name_plural': 'Carousel unite options',
            },
        ),
        migrations.CreateModel(
            name='CompactThemePlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_compactthemeplugin', serialize=False, to='cms.CMSPlugin')),
                ('theme_hide_panel_under_width', models.PositiveSmallIntegerField(blank=True, default=480, help_text="Hide panel under certain browser width, if null, don't hide.", null=True, verbose_name='hide panel under width')),
                ('theme_panel_position', models.CharField(choices=[('top', 'Top'), ('bottom', 'Bottom'), ('left', 'Left'), ('right', 'Right')], default='bottom', help_text='Thumbs panel position.', max_length=6, verbose_name='panel position')),
                ('slider_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('slider_arrow_left_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Left arrow horizonal alignment.', max_length=6, verbose_name='left arrow alignment')),
                ('slider_arrow_left_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='left arrow vertical alignment')),
                ('slider_arrow_left_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='left arrow horizontal offset')),
                ('slider_arrow_left_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='left arrow vertical offset')),
                ('slider_arrow_right_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Right arrow horizonal alignment.', max_length=6, verbose_name='Right arrow alignment')),
                ('slider_arrow_right_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='light arrow vertical alignment')),
                ('slider_arrow_right_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='right arrow horizontal offset')),
                ('slider_arrow_right_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='right arrow vertical offset')),
                ('slider_bullets_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Bullets horizontal alignment.', max_length=6, verbose_name='bullets alignment')),
                ('slider_bullets_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='bottom', max_length=6, verbose_name='bullets vertical alignment')),
                ('slider_bullets_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='bullets horizontal offset')),
                ('slider_bullets_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='bullets vertical offset')),
                ('slider_bullets_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the bullets, if blank inherit from gallery skin.', max_length=255, verbose_name='bullets skin')),
                ('slider_bullets_space_between', models.SmallIntegerField(blank=True, default=None, help_text='Set the space between bullets. If blank then will be set default space from the skins.', null=True, verbose_name='space between bullets')),
                ('slider_controls_always_on', models.BooleanField(default=True, help_text='Controls are always on, false - show only on mouseover.', verbose_name='controls always on')),
                ('slider_controls_appear_duration', models.PositiveSmallIntegerField(default=300, help_text='The duration of appearing controls.', verbose_name='controls appear duration')),
                ('slider_controls_appear_ontap', models.BooleanField(default=True, help_text='Appear controls on tap event on touch devices.', verbose_name='controls appear on tap')),
                ('slider_control_swipe', models.BooleanField(default=True, verbose_name='enable swiping control')),
                ('slider_control_zoom', models.BooleanField(default=True, verbose_name='enable zooming control')),
                ('slider_enable_arrows', models.BooleanField(default=True, verbose_name='enable arrows')),
                ('slider_enable_bullets', models.BooleanField(default=False, verbose_name='enable bullets')),
                ('slider_enable_fullscreen_button', models.BooleanField(default=True, verbose_name='enable fullscreen button')),
                ('slider_enable_play_button', models.BooleanField(default=True, verbose_name='enable play button')),
                ('slider_enable_progress_indicator', models.BooleanField(default=True, verbose_name='enable progress indicator')),
                ('slider_enable_text_panel', models.BooleanField(default=False, verbose_name='enable text panel')),
                ('slider_enable_zoom_panel', models.BooleanField(default=True, help_text='Enable the zoom buttons, works together with zoom control.', verbose_name='enable zoom panel')),
                ('slider_fullscreen_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Fullscreen button horizonatal alignment.', max_length=6, verbose_name='fullscreen button alignment')),
                ('slider_fullscreen_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='fullscreen button vertical alignment')),
                ('slider_fullscreen_button_offset_hor', models.PositiveSmallIntegerField(default=11, verbose_name='fullscreen button horizontal offset')),
                ('slider_fullscreen_button_offset_vert', models.PositiveSmallIntegerField(default=9, verbose_name='fullscreen button vertical offset')),
                ('slider_fullscreen_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider fullscreen button, if empty inherit from gallery skin.', max_length=255, verbose_name='fullscreen button skin')),
                ('slider_item_padding_bottom', models.PositiveSmallIntegerField(default=0, verbose_name='slider item bottom padding')),
                ('slider_item_padding_left', models.PositiveSmallIntegerField(default=0, verbose_name='slider item left padding')),
                ('slider_item_padding_right', models.PositiveSmallIntegerField(default=0, verbose_name='slider item right padding')),
                ('slider_item_padding_top', models.PositiveSmallIntegerField(default=0, verbose_name='slider item top padding')),
                ('slider_loader_color', models.CharField(choices=[('white', 'White'), ('black', 'Black')], default='white', max_length=6, verbose_name='loader color')),
                ('slider_loader_type', models.PositiveSmallIntegerField(choices=[(1, 'Shape 1'), (2, 'Shape 2'), (3, 'Shape 3'), (4, 'Shape 4'), (5, 'Shape 5'), (6, 'Shape 6'), (7, 'Shape 7')], default=1, verbose_name='shape of the loader')),
                ('slider_play_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Play button horizonatal alignment.', max_length=6, verbose_name='play button alignment')),
                ('slider_play_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='play button vertical alignment')),
                ('slider_play_button_offset_hor', models.PositiveSmallIntegerField(default=40, verbose_name='play button horizontal offset')),
                ('slider_play_button_offset_vert', models.PositiveSmallIntegerField(default=8, verbose_name='play button vertical offset')),
                ('slider_play_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider play button, if empty inherit from gallery skin.', max_length=255, verbose_name='play button skin')),
                ('slider_progressbar_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='progress bar color')),
                ('slider_progressbar_line_width', models.PositiveSmallIntegerField(default=5, verbose_name='progress bar line width')),
                ('slider_progressbar_opacity', models.PositiveSmallIntegerField(default=60, help_text='The opacity of the progress bar.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='progress bar opacity (%)')),
                ('slider_progresspie_color1', colorfield.fields.ColorField(default='#B5B5B5', max_length=18, verbose_name='progress pie first color')),
                ('slider_progresspie_color2', colorfield.fields.ColorField(default='#E5E5E5', max_length=18, verbose_name='progress pie second color')),
                ('slider_progresspie_height', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie height')),
                ('slider_progresspie_stroke_width', models.PositiveSmallIntegerField(default=6, verbose_name='progress pie stroke width')),
                ('slider_progresspie_type_fill', models.BooleanField(choices=[(False, 'Stroke'), (True, 'Fill')], default=False, verbose_name='progress pie type')),
                ('slider_progresspie_width', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie width')),
                ('slider_progress_indicator_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Progress indicator horizonatal alignment.', max_length=6, verbose_name='progress indicator alignment')),
                ('slider_progress_indicator_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='progress indicator vertical alignment')),
                ('slider_progress_indicator_offset_hor', models.PositiveSmallIntegerField(default=16, verbose_name='progress indicator horizontal offset ')),
                ('slider_progress_indicator_offset_vert', models.PositiveSmallIntegerField(default=36, verbose_name='progress indicator vertical offset ')),
                ('slider_progress_indicator_type', models.CharField(choices=[('pie', 'Pie'), ('pie2', 'Pie 2'), ('bar', 'Bar')], default='pie', help_text='if pie not supported, it will switch to bar automatically.', max_length=4, verbose_name='progress indicator type')),
                ('slider_scale_mode', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode')),
                ('slider_scale_mode_fullscreen', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='down', max_length=4, verbose_name='fullscreen scale mode')),
                ('slider_scale_mode_media', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode on media items')),
                ('slider_textpanel_always_on', models.BooleanField(default=True, help_text='Text panel are always on or show only on mouseover.', verbose_name='text panel always on')),
                ('slider_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='text panel background color')),
                ('slider_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, verbose_name='text panel background CSS')),
                ('slider_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='text panel background opacity (%)')),
                ('slider_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='text panel description CSS')),
                ('slider_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='text panel title CSS')),
                ('slider_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('slider_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel description text color')),
                ('slider_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('slider_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('slider_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_textpanel_enable_bg', models.BooleanField(default=True, help_text='Enable the textpanel background.', verbose_name='enable background')),
                ('slider_textpanel_enable_description', models.BooleanField(default=True, help_text='Enable the description text.', verbose_name='enable description')),
                ('slider_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('slider_textpanel_fade_duration', models.PositiveSmallIntegerField(default=200, verbose_name='text panel fade duration ')),
                ('slider_textpanel_height', models.PositiveSmallIntegerField(blank=True, default=None, help_text='If blank it will be set dynamically.', null=True, verbose_name='text panel height ')),
                ('slider_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=10, verbose_name='text panel bottom padding')),
                ('slider_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, verbose_name='text panel left padding')),
                ('slider_textpanel_padding_right', models.PositiveSmallIntegerField(default=10, verbose_name='text panel right padding')),
                ('slider_textpanel_padding_title_description', models.PositiveSmallIntegerField(default=5, help_text='the space between the title and the description.', verbose_name='text panel title padding')),
                ('slider_textpanel_padding_top', models.PositiveSmallIntegerField(default=10, verbose_name='text panel top padding')),
                ('slider_textpanel_text_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='text panel vertical alignment')),
                ('slider_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold title')),
                ('slider_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel title text color')),
                ('slider_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('slider_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='title font size (px)')),
                ('slider_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_transition', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='The transition of the slide change.', max_length=5, verbose_name='transition')),
                ('slider_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Transition easing function of slide change.', max_length=17, verbose_name='transition easing')),
                ('slider_transition_speed', models.PositiveSmallIntegerField(default=300, help_text='Transition duration of slide change.', verbose_name='transition speed')),
                ('slider_videoplay_button_type', models.CharField(choices=[('square', 'Square'), ('round', 'Round')], default='square', max_length=6, verbose_name='videoplay button type')),
                ('slider_zoompanel_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Zoom panel horizonatal alignment.', max_length=6, verbose_name='zoom panel alignment')),
                ('slider_zoompanel_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='zoom panel vertical alignment')),
                ('slider_zoompanel_offset_hor', models.PositiveSmallIntegerField(default=12, verbose_name='zoom panel horizontal offset')),
                ('slider_zoompanel_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='zoom panel vertical offset')),
                ('slider_zoompanel_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider zoom panel, if empty inherit from gallery skin.', max_length=255, verbose_name='zoom panel skin')),
                ('slider_zoom_max_ratio', models.PositiveSmallIntegerField(default=6, verbose_name='maximum zoom ratio')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=400, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_skin', models.CharField(choices=[('default', 'Default'), ('alexis', 'Alexis')], max_length=255, verbose_name='gallery skin')),
                ('gallery_width', models.PositiveSmallIntegerField(default=900, help_text='Gallery width.', verbose_name='width')),
                ('gallery_autoplay', models.BooleanField(default=False, help_text='Begin slideshow autoplay on start.', verbose_name='gallery autoplay')),
                ('gallery_carousel', models.BooleanField(default=True, help_text='Next button on last image goes to first image.', verbose_name='carousel')),
                ('gallery_control_keyboard', models.BooleanField(default=True, help_text='Enable / disable keyboard controls.', verbose_name='keyboard')),
                ('gallery_control_thumbs_mousewheel', models.BooleanField(default=False, help_text='Enable / disable the mousewheel.', verbose_name='mousewheel')),
                ('gallery_debug_errors', models.BooleanField(default=True, help_text='show error message when there is some error on the gallery area.', verbose_name='debug errors')),
                ('gallery_height', models.PositiveSmallIntegerField(default=500, help_text='Gallery height.', verbose_name='height')),
                ('gallery_images_preload_type', models.CharField(choices=[('all', 'load all the images first time'), ('minimal', 'only image nabours will be loaded each time'), ('visible', 'visible thumbs images will be loaded each time')], default='minimal', help_text='Preload type of the images.', max_length=8, verbose_name='preload type')),
                ('gallery_min_height', models.PositiveSmallIntegerField(default=300, help_text='Gallery minimal height when resizing.', verbose_name='minimum height')),
                ('gallery_pause_on_mouseover', models.BooleanField(default=False, help_text='Pause on mouseover when playing slideshow.', verbose_name='pause on mouseover')),
                ('gallery_play_interval', models.PositiveSmallIntegerField(default=3000, help_text='Play interval of the slideshow.', verbose_name='play interval')),
                ('gallery_preserve_ratio', models.BooleanField(default=True, help_text='Preserve aspect ratio on window resize.', verbose_name='carousel')),
                ('thumb_border_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='border color')),
                ('thumb_border_effect', models.BooleanField(default=True, help_text='Specify if the thumb has border.', verbose_name='border effect')),
                ('thumb_border_width', models.PositiveSmallIntegerField(default=0, verbose_name='border width')),
                ('thumb_color_overlay_effect', models.BooleanField(default=True, help_text='Thumbnail color overlay effect, release the overlay on mouseover and selected states.', verbose_name='color overlay effect')),
                ('thumb_fixed_size', models.BooleanField(choices=[(True, 'Fixed'), (False, 'Dynamic')], default=True, help_text='Fixed/dynamic thumbnail width.', verbose_name='sizing method')),
                ('thumb_height', models.PositiveSmallIntegerField(default=50, verbose_name='height')),
                ('thumb_image_overlay_effect', models.BooleanField(default=False, help_text='Images overlay effect on normal state only.', verbose_name='image overlay effect')),
                ('thumb_image_overlay_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image overlay type')),
                ('thumb_loader_type', models.CharField(choices=[('dark', 'Dark'), ('light', 'Light')], default='dark', max_length=8, verbose_name='loader type')),
                ('thumb_overlay_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='overlay color')),
                ('thumb_overlay_opacity', models.PositiveSmallIntegerField(default=40, help_text='Thumbnail overlay color opacity.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('thumb_overlay_reverse', models.BooleanField(default=False, help_text='Reverse the overlay, will be shown on selected state only.', verbose_name='overlay reverse')),
                ('thumb_over_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in mouseover state.', max_length=18, verbose_name='mouseover border color')),
                ('thumb_over_border_width', models.PositiveSmallIntegerField(default=0, help_text='Thumbnail border width in mouseover state.', verbose_name='mouseover border width')),
                ('thumb_round_corners_radius', models.PositiveSmallIntegerField(default=0, verbose_name='border radius')),
                ('thumb_selected_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in selected state.', max_length=18, verbose_name='selected border color')),
                ('thumb_selected_border_width', models.PositiveSmallIntegerField(default=1, help_text='Thumbnail border width in selected state.', verbose_name='selected border width')),
                ('thumb_show_loader', models.BooleanField(default=True, help_text='Show thumb loader while loading the thumb.', verbose_name='show loader')),
                ('thumb_transition_duration', models.PositiveSmallIntegerField(default=200, help_text='Thumbnail effect transition duration.', verbose_name='transition duration')),
                ('thumb_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutQuad', help_text='Thumb effect transition easing.', max_length=17, verbose_name='transition easing')),
                ('thumb_width', models.PositiveSmallIntegerField(default=88, verbose_name='width')),
                ('strippanel_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='background color of the strip wrapper, if not set, it will be taken from the CSS.', max_length=18, verbose_name='background color')),
                ('strippanel_buttons_role', models.CharField(choices=[('scroll_strip', 'Scroll strip'), ('advance_item', 'Advance item')], default='scroll_strip', help_text='Role of the side buttons.', max_length=12, verbose_name='buttons role')),
                ('strippanel_buttons_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the buttons, if empty inherit from gallery skin.', max_length=255, verbose_name='buttons skin')),
                ('strippanel_enable_buttons', models.BooleanField(default=False, help_text='Enable buttons from the sides of the panel.', verbose_name='enable buttons')),
                ('strippanel_enable_handle', models.BooleanField(default=True, verbose_name='enable handle')),
                ('strippanel_handle_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='top', help_text='Close handle tip alignment on the handle bar according panel orientation.', max_length=6, verbose_name='handle alignment')),
                ('strippanel_handle_offset', models.PositiveSmallIntegerField(default=0, help_text='Offset of handle bar according the valign.', verbose_name='handle offset')),
                ('strippanel_handle_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the handle, if empty inherit from gallery skin.', max_length=255, verbose_name='handle skin')),
                ('strippanel_padding_bottom', models.PositiveSmallIntegerField(default=8, help_text='Space from bottom of the panel.', verbose_name='bottom padding')),
                ('strippanel_padding_buttons', models.PositiveSmallIntegerField(default=2, help_text='Padding between the buttons and the panel.', verbose_name='buttons padding')),
                ('strippanel_padding_left', models.PositiveSmallIntegerField(default=0, help_text='Space from left of the panel.', verbose_name='left padding')),
                ('strippanel_padding_right', models.PositiveSmallIntegerField(default=0, help_text='Space from right of the panel.', verbose_name='right padding')),
                ('strippanel_padding_top', models.PositiveSmallIntegerField(default=8, help_text='Space from top of the panel.', verbose_name='top padding')),
                ('strip_control_avia', models.BooleanField(default=False, help_text='Move the strip according strip moseover position.', verbose_name='avia control')),
                ('strip_control_touch', models.BooleanField(default=True, help_text='Move the strip by dragging it.', verbose_name='touch control')),
                ('strip_scroll_to_thumb_duration', models.PositiveSmallIntegerField(default=500, help_text='Duration of scrolling to thumb.', verbose_name='scroll animation duration')),
                ('strip_scroll_to_thumb_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutCubic', help_text='Easing of scrolling to thumb animation.', max_length=17, verbose_name='scroll animation')),
                ('strip_space_between_thumbs', models.PositiveSmallIntegerField(default=6, verbose_name='space between thumbnails')),
                ('strip_thumbs_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Alignment of the thumbnails when smaller than the strip size.', max_length=6, verbose_name='thumbnail alignment')),
                ('strip_thumb_touch_sensetivity', models.PositiveSmallIntegerField(default=2, help_text='1: most sensetive; 100: least sensetive.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='touch sensitivity')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compacttheme_unite_plugins_full', related_query_name='compacttheme_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Compact theme plugin',
                'verbose_name_plural': 'Compact theme plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='CompactThemeSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme_hide_panel_under_width', models.PositiveSmallIntegerField(blank=True, default=480, help_text="Hide panel under certain browser width, if null, don't hide.", null=True, verbose_name='hide panel under width')),
                ('theme_panel_position', models.CharField(choices=[('top', 'Top'), ('bottom', 'Bottom'), ('left', 'Left'), ('right', 'Right')], default='bottom', help_text='Thumbs panel position.', max_length=6, verbose_name='panel position')),
                ('slider_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('slider_arrow_left_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Left arrow horizonal alignment.', max_length=6, verbose_name='left arrow alignment')),
                ('slider_arrow_left_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='left arrow vertical alignment')),
                ('slider_arrow_left_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='left arrow horizontal offset')),
                ('slider_arrow_left_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='left arrow vertical offset')),
                ('slider_arrow_right_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Right arrow horizonal alignment.', max_length=6, verbose_name='Right arrow alignment')),
                ('slider_arrow_right_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='light arrow vertical alignment')),
                ('slider_arrow_right_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='right arrow horizontal offset')),
                ('slider_arrow_right_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='right arrow vertical offset')),
                ('slider_bullets_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Bullets horizontal alignment.', max_length=6, verbose_name='bullets alignment')),
                ('slider_bullets_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='bottom', max_length=6, verbose_name='bullets vertical alignment')),
                ('slider_bullets_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='bullets horizontal offset')),
                ('slider_bullets_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='bullets vertical offset')),
                ('slider_bullets_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the bullets, if blank inherit from gallery skin.', max_length=255, verbose_name='bullets skin')),
                ('slider_bullets_space_between', models.SmallIntegerField(blank=True, default=None, help_text='Set the space between bullets. If blank then will be set default space from the skins.', null=True, verbose_name='space between bullets')),
                ('slider_controls_always_on', models.BooleanField(default=True, help_text='Controls are always on, false - show only on mouseover.', verbose_name='controls always on')),
                ('slider_controls_appear_duration', models.PositiveSmallIntegerField(default=300, help_text='The duration of appearing controls.', verbose_name='controls appear duration')),
                ('slider_controls_appear_ontap', models.BooleanField(default=True, help_text='Appear controls on tap event on touch devices.', verbose_name='controls appear on tap')),
                ('slider_control_swipe', models.BooleanField(default=True, verbose_name='enable swiping control')),
                ('slider_control_zoom', models.BooleanField(default=True, verbose_name='enable zooming control')),
                ('slider_enable_arrows', models.BooleanField(default=True, verbose_name='enable arrows')),
                ('slider_enable_bullets', models.BooleanField(default=False, verbose_name='enable bullets')),
                ('slider_enable_fullscreen_button', models.BooleanField(default=True, verbose_name='enable fullscreen button')),
                ('slider_enable_play_button', models.BooleanField(default=True, verbose_name='enable play button')),
                ('slider_enable_progress_indicator', models.BooleanField(default=True, verbose_name='enable progress indicator')),
                ('slider_enable_text_panel', models.BooleanField(default=False, verbose_name='enable text panel')),
                ('slider_enable_zoom_panel', models.BooleanField(default=True, help_text='Enable the zoom buttons, works together with zoom control.', verbose_name='enable zoom panel')),
                ('slider_fullscreen_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Fullscreen button horizonatal alignment.', max_length=6, verbose_name='fullscreen button alignment')),
                ('slider_fullscreen_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='fullscreen button vertical alignment')),
                ('slider_fullscreen_button_offset_hor', models.PositiveSmallIntegerField(default=11, verbose_name='fullscreen button horizontal offset')),
                ('slider_fullscreen_button_offset_vert', models.PositiveSmallIntegerField(default=9, verbose_name='fullscreen button vertical offset')),
                ('slider_fullscreen_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider fullscreen button, if empty inherit from gallery skin.', max_length=255, verbose_name='fullscreen button skin')),
                ('slider_item_padding_bottom', models.PositiveSmallIntegerField(default=0, verbose_name='slider item bottom padding')),
                ('slider_item_padding_left', models.PositiveSmallIntegerField(default=0, verbose_name='slider item left padding')),
                ('slider_item_padding_right', models.PositiveSmallIntegerField(default=0, verbose_name='slider item right padding')),
                ('slider_item_padding_top', models.PositiveSmallIntegerField(default=0, verbose_name='slider item top padding')),
                ('slider_loader_color', models.CharField(choices=[('white', 'White'), ('black', 'Black')], default='white', max_length=6, verbose_name='loader color')),
                ('slider_loader_type', models.PositiveSmallIntegerField(choices=[(1, 'Shape 1'), (2, 'Shape 2'), (3, 'Shape 3'), (4, 'Shape 4'), (5, 'Shape 5'), (6, 'Shape 6'), (7, 'Shape 7')], default=1, verbose_name='shape of the loader')),
                ('slider_play_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Play button horizonatal alignment.', max_length=6, verbose_name='play button alignment')),
                ('slider_play_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='play button vertical alignment')),
                ('slider_play_button_offset_hor', models.PositiveSmallIntegerField(default=40, verbose_name='play button horizontal offset')),
                ('slider_play_button_offset_vert', models.PositiveSmallIntegerField(default=8, verbose_name='play button vertical offset')),
                ('slider_play_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider play button, if empty inherit from gallery skin.', max_length=255, verbose_name='play button skin')),
                ('slider_progressbar_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='progress bar color')),
                ('slider_progressbar_line_width', models.PositiveSmallIntegerField(default=5, verbose_name='progress bar line width')),
                ('slider_progressbar_opacity', models.PositiveSmallIntegerField(default=60, help_text='The opacity of the progress bar.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='progress bar opacity (%)')),
                ('slider_progresspie_color1', colorfield.fields.ColorField(default='#B5B5B5', max_length=18, verbose_name='progress pie first color')),
                ('slider_progresspie_color2', colorfield.fields.ColorField(default='#E5E5E5', max_length=18, verbose_name='progress pie second color')),
                ('slider_progresspie_height', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie height')),
                ('slider_progresspie_stroke_width', models.PositiveSmallIntegerField(default=6, verbose_name='progress pie stroke width')),
                ('slider_progresspie_type_fill', models.BooleanField(choices=[(False, 'Stroke'), (True, 'Fill')], default=False, verbose_name='progress pie type')),
                ('slider_progresspie_width', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie width')),
                ('slider_progress_indicator_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Progress indicator horizonatal alignment.', max_length=6, verbose_name='progress indicator alignment')),
                ('slider_progress_indicator_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='progress indicator vertical alignment')),
                ('slider_progress_indicator_offset_hor', models.PositiveSmallIntegerField(default=16, verbose_name='progress indicator horizontal offset ')),
                ('slider_progress_indicator_offset_vert', models.PositiveSmallIntegerField(default=36, verbose_name='progress indicator vertical offset ')),
                ('slider_progress_indicator_type', models.CharField(choices=[('pie', 'Pie'), ('pie2', 'Pie 2'), ('bar', 'Bar')], default='pie', help_text='if pie not supported, it will switch to bar automatically.', max_length=4, verbose_name='progress indicator type')),
                ('slider_scale_mode', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode')),
                ('slider_scale_mode_fullscreen', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='down', max_length=4, verbose_name='fullscreen scale mode')),
                ('slider_scale_mode_media', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode on media items')),
                ('slider_textpanel_always_on', models.BooleanField(default=True, help_text='Text panel are always on or show only on mouseover.', verbose_name='text panel always on')),
                ('slider_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='text panel background color')),
                ('slider_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, verbose_name='text panel background CSS')),
                ('slider_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='text panel background opacity (%)')),
                ('slider_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='text panel description CSS')),
                ('slider_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='text panel title CSS')),
                ('slider_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('slider_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel description text color')),
                ('slider_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('slider_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('slider_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_textpanel_enable_bg', models.BooleanField(default=True, help_text='Enable the textpanel background.', verbose_name='enable background')),
                ('slider_textpanel_enable_description', models.BooleanField(default=True, help_text='Enable the description text.', verbose_name='enable description')),
                ('slider_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('slider_textpanel_fade_duration', models.PositiveSmallIntegerField(default=200, verbose_name='text panel fade duration ')),
                ('slider_textpanel_height', models.PositiveSmallIntegerField(blank=True, default=None, help_text='If blank it will be set dynamically.', null=True, verbose_name='text panel height ')),
                ('slider_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=10, verbose_name='text panel bottom padding')),
                ('slider_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, verbose_name='text panel left padding')),
                ('slider_textpanel_padding_right', models.PositiveSmallIntegerField(default=10, verbose_name='text panel right padding')),
                ('slider_textpanel_padding_title_description', models.PositiveSmallIntegerField(default=5, help_text='the space between the title and the description.', verbose_name='text panel title padding')),
                ('slider_textpanel_padding_top', models.PositiveSmallIntegerField(default=10, verbose_name='text panel top padding')),
                ('slider_textpanel_text_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='text panel vertical alignment')),
                ('slider_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold title')),
                ('slider_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel title text color')),
                ('slider_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('slider_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='title font size (px)')),
                ('slider_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_transition', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='The transition of the slide change.', max_length=5, verbose_name='transition')),
                ('slider_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Transition easing function of slide change.', max_length=17, verbose_name='transition easing')),
                ('slider_transition_speed', models.PositiveSmallIntegerField(default=300, help_text='Transition duration of slide change.', verbose_name='transition speed')),
                ('slider_videoplay_button_type', models.CharField(choices=[('square', 'Square'), ('round', 'Round')], default='square', max_length=6, verbose_name='videoplay button type')),
                ('slider_zoompanel_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Zoom panel horizonatal alignment.', max_length=6, verbose_name='zoom panel alignment')),
                ('slider_zoompanel_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='zoom panel vertical alignment')),
                ('slider_zoompanel_offset_hor', models.PositiveSmallIntegerField(default=12, verbose_name='zoom panel horizontal offset')),
                ('slider_zoompanel_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='zoom panel vertical offset')),
                ('slider_zoompanel_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider zoom panel, if empty inherit from gallery skin.', max_length=255, verbose_name='zoom panel skin')),
                ('slider_zoom_max_ratio', models.PositiveSmallIntegerField(default=6, verbose_name='maximum zoom ratio')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=400, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_skin', models.CharField(choices=[('default', 'Default'), ('alexis', 'Alexis')], max_length=255, verbose_name='gallery skin')),
                ('gallery_width', models.PositiveSmallIntegerField(default=900, help_text='Gallery width.', verbose_name='width')),
                ('gallery_autoplay', models.BooleanField(default=False, help_text='Begin slideshow autoplay on start.', verbose_name='gallery autoplay')),
                ('gallery_carousel', models.BooleanField(default=True, help_text='Next button on last image goes to first image.', verbose_name='carousel')),
                ('gallery_control_keyboard', models.BooleanField(default=True, help_text='Enable / disable keyboard controls.', verbose_name='keyboard')),
                ('gallery_control_thumbs_mousewheel', models.BooleanField(default=False, help_text='Enable / disable the mousewheel.', verbose_name='mousewheel')),
                ('gallery_debug_errors', models.BooleanField(default=True, help_text='show error message when there is some error on the gallery area.', verbose_name='debug errors')),
                ('gallery_height', models.PositiveSmallIntegerField(default=500, help_text='Gallery height.', verbose_name='height')),
                ('gallery_images_preload_type', models.CharField(choices=[('all', 'load all the images first time'), ('minimal', 'only image nabours will be loaded each time'), ('visible', 'visible thumbs images will be loaded each time')], default='minimal', help_text='Preload type of the images.', max_length=8, verbose_name='preload type')),
                ('gallery_min_height', models.PositiveSmallIntegerField(default=300, help_text='Gallery minimal height when resizing.', verbose_name='minimum height')),
                ('gallery_pause_on_mouseover', models.BooleanField(default=False, help_text='Pause on mouseover when playing slideshow.', verbose_name='pause on mouseover')),
                ('gallery_play_interval', models.PositiveSmallIntegerField(default=3000, help_text='Play interval of the slideshow.', verbose_name='play interval')),
                ('gallery_preserve_ratio', models.BooleanField(default=True, help_text='Preserve aspect ratio on window resize.', verbose_name='carousel')),
                ('thumb_border_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='border color')),
                ('thumb_border_effect', models.BooleanField(default=True, help_text='Specify if the thumb has border.', verbose_name='border effect')),
                ('thumb_border_width', models.PositiveSmallIntegerField(default=0, verbose_name='border width')),
                ('thumb_color_overlay_effect', models.BooleanField(default=True, help_text='Thumbnail color overlay effect, release the overlay on mouseover and selected states.', verbose_name='color overlay effect')),
                ('thumb_fixed_size', models.BooleanField(choices=[(True, 'Fixed'), (False, 'Dynamic')], default=True, help_text='Fixed/dynamic thumbnail width.', verbose_name='sizing method')),
                ('thumb_height', models.PositiveSmallIntegerField(default=50, verbose_name='height')),
                ('thumb_image_overlay_effect', models.BooleanField(default=False, help_text='Images overlay effect on normal state only.', verbose_name='image overlay effect')),
                ('thumb_image_overlay_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image overlay type')),
                ('thumb_loader_type', models.CharField(choices=[('dark', 'Dark'), ('light', 'Light')], default='dark', max_length=8, verbose_name='loader type')),
                ('thumb_overlay_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='overlay color')),
                ('thumb_overlay_opacity', models.PositiveSmallIntegerField(default=40, help_text='Thumbnail overlay color opacity.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('thumb_overlay_reverse', models.BooleanField(default=False, help_text='Reverse the overlay, will be shown on selected state only.', verbose_name='overlay reverse')),
                ('thumb_over_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in mouseover state.', max_length=18, verbose_name='mouseover border color')),
                ('thumb_over_border_width', models.PositiveSmallIntegerField(default=0, help_text='Thumbnail border width in mouseover state.', verbose_name='mouseover border width')),
                ('thumb_round_corners_radius', models.PositiveSmallIntegerField(default=0, verbose_name='border radius')),
                ('thumb_selected_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in selected state.', max_length=18, verbose_name='selected border color')),
                ('thumb_selected_border_width', models.PositiveSmallIntegerField(default=1, help_text='Thumbnail border width in selected state.', verbose_name='selected border width')),
                ('thumb_show_loader', models.BooleanField(default=True, help_text='Show thumb loader while loading the thumb.', verbose_name='show loader')),
                ('thumb_transition_duration', models.PositiveSmallIntegerField(default=200, help_text='Thumbnail effect transition duration.', verbose_name='transition duration')),
                ('thumb_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutQuad', help_text='Thumb effect transition easing.', max_length=17, verbose_name='transition easing')),
                ('thumb_width', models.PositiveSmallIntegerField(default=88, verbose_name='width')),
                ('strippanel_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='background color of the strip wrapper, if not set, it will be taken from the CSS.', max_length=18, verbose_name='background color')),
                ('strippanel_buttons_role', models.CharField(choices=[('scroll_strip', 'Scroll strip'), ('advance_item', 'Advance item')], default='scroll_strip', help_text='Role of the side buttons.', max_length=12, verbose_name='buttons role')),
                ('strippanel_buttons_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the buttons, if empty inherit from gallery skin.', max_length=255, verbose_name='buttons skin')),
                ('strippanel_enable_buttons', models.BooleanField(default=False, help_text='Enable buttons from the sides of the panel.', verbose_name='enable buttons')),
                ('strippanel_enable_handle', models.BooleanField(default=True, verbose_name='enable handle')),
                ('strippanel_handle_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='top', help_text='Close handle tip alignment on the handle bar according panel orientation.', max_length=6, verbose_name='handle alignment')),
                ('strippanel_handle_offset', models.PositiveSmallIntegerField(default=0, help_text='Offset of handle bar according the valign.', verbose_name='handle offset')),
                ('strippanel_handle_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the handle, if empty inherit from gallery skin.', max_length=255, verbose_name='handle skin')),
                ('strippanel_padding_bottom', models.PositiveSmallIntegerField(default=8, help_text='Space from bottom of the panel.', verbose_name='bottom padding')),
                ('strippanel_padding_buttons', models.PositiveSmallIntegerField(default=2, help_text='Padding between the buttons and the panel.', verbose_name='buttons padding')),
                ('strippanel_padding_left', models.PositiveSmallIntegerField(default=0, help_text='Space from left of the panel.', verbose_name='left padding')),
                ('strippanel_padding_right', models.PositiveSmallIntegerField(default=0, help_text='Space from right of the panel.', verbose_name='right padding')),
                ('strippanel_padding_top', models.PositiveSmallIntegerField(default=8, help_text='Space from top of the panel.', verbose_name='top padding')),
                ('strip_control_avia', models.BooleanField(default=False, help_text='Move the strip according strip moseover position.', verbose_name='avia control')),
                ('strip_control_touch', models.BooleanField(default=True, help_text='Move the strip by dragging it.', verbose_name='touch control')),
                ('strip_scroll_to_thumb_duration', models.PositiveSmallIntegerField(default=500, help_text='Duration of scrolling to thumb.', verbose_name='scroll animation duration')),
                ('strip_scroll_to_thumb_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutCubic', help_text='Easing of scrolling to thumb animation.', max_length=17, verbose_name='scroll animation')),
                ('strip_space_between_thumbs', models.PositiveSmallIntegerField(default=6, verbose_name='space between thumbnails')),
                ('strip_thumbs_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Alignment of the thumbnails when smaller than the strip size.', max_length=6, verbose_name='thumbnail alignment')),
                ('strip_thumb_touch_sensetivity', models.PositiveSmallIntegerField(default=2, help_text='1: most sensetive; 100: least sensetive.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='touch sensitivity')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Compact theme unite options',
                'verbose_name_plural': 'Compact theme unite options',
            },
        ),
        migrations.CreateModel(
            name='DefaultThemePlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_defaultthemeplugin', serialize=False, to='cms.CMSPlugin')),
                ('theme_hide_panel_under_width', models.PositiveSmallIntegerField(blank=True, default=480, help_text="Hide panel under certain browser width, if null, don't hide.", null=True, verbose_name='hide panel under width')),
                ('theme_enable_fullscreen_button', models.BooleanField(default=True, help_text='Show, hide the theme fullscreen button. The position in the theme is constant.', verbose_name='enable fullscreen button')),
                ('theme_enable_hidepanel_button', models.BooleanField(default=True, help_text='Show, hide the hidepanel button.', verbose_name='enable hidepanel button')),
                ('theme_enable_play_button', models.BooleanField(default=True, help_text='Show, hide the theme play button. The position in the theme is constant.', verbose_name='enable play button')),
                ('theme_enable_text_panel', models.BooleanField(default=True, help_text='Enable the panel text panel.', verbose_name='enable text panel')),
                ('theme_text_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='The align of the text in the textpanel.', max_length=6, verbose_name='text align')),
                ('theme_text_padding_left', models.PositiveSmallIntegerField(default=20, help_text='Left padding of the text in the textpanel.', verbose_name='text padding left')),
                ('theme_text_padding_right', models.PositiveSmallIntegerField(default=5, help_text='Right padding of the text in the textpanel.', verbose_name='text padding right')),
                ('theme_text_type', models.CharField(choices=[('title', 'Title'), ('description', 'Description')], default='title', help_text='text that will be shown on the text panel, title or description.', max_length=6, verbose_name='text align')),
                ('slider_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('slider_arrow_left_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Left arrow horizonal alignment.', max_length=6, verbose_name='left arrow alignment')),
                ('slider_arrow_left_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='left arrow vertical alignment')),
                ('slider_arrow_left_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='left arrow horizontal offset')),
                ('slider_arrow_left_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='left arrow vertical offset')),
                ('slider_arrow_right_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Right arrow horizonal alignment.', max_length=6, verbose_name='Right arrow alignment')),
                ('slider_arrow_right_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='light arrow vertical alignment')),
                ('slider_arrow_right_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='right arrow horizontal offset')),
                ('slider_arrow_right_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='right arrow vertical offset')),
                ('slider_bullets_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Bullets horizontal alignment.', max_length=6, verbose_name='bullets alignment')),
                ('slider_bullets_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='bottom', max_length=6, verbose_name='bullets vertical alignment')),
                ('slider_bullets_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='bullets horizontal offset')),
                ('slider_bullets_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='bullets vertical offset')),
                ('slider_bullets_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the bullets, if blank inherit from gallery skin.', max_length=255, verbose_name='bullets skin')),
                ('slider_bullets_space_between', models.SmallIntegerField(blank=True, default=None, help_text='Set the space between bullets. If blank then will be set default space from the skins.', null=True, verbose_name='space between bullets')),
                ('slider_controls_always_on', models.BooleanField(default=True, help_text='Controls are always on, false - show only on mouseover.', verbose_name='controls always on')),
                ('slider_controls_appear_duration', models.PositiveSmallIntegerField(default=300, help_text='The duration of appearing controls.', verbose_name='controls appear duration')),
                ('slider_controls_appear_ontap', models.BooleanField(default=True, help_text='Appear controls on tap event on touch devices.', verbose_name='controls appear on tap')),
                ('slider_control_swipe', models.BooleanField(default=True, verbose_name='enable swiping control')),
                ('slider_control_zoom', models.BooleanField(default=True, verbose_name='enable zooming control')),
                ('slider_enable_arrows', models.BooleanField(default=True, verbose_name='enable arrows')),
                ('slider_enable_bullets', models.BooleanField(default=False, verbose_name='enable bullets')),
                ('slider_enable_fullscreen_button', models.BooleanField(default=True, verbose_name='enable fullscreen button')),
                ('slider_enable_play_button', models.BooleanField(default=True, verbose_name='enable play button')),
                ('slider_enable_progress_indicator', models.BooleanField(default=True, verbose_name='enable progress indicator')),
                ('slider_enable_text_panel', models.BooleanField(default=False, verbose_name='enable text panel')),
                ('slider_enable_zoom_panel', models.BooleanField(default=True, help_text='Enable the zoom buttons, works together with zoom control.', verbose_name='enable zoom panel')),
                ('slider_fullscreen_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Fullscreen button horizonatal alignment.', max_length=6, verbose_name='fullscreen button alignment')),
                ('slider_fullscreen_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='fullscreen button vertical alignment')),
                ('slider_fullscreen_button_offset_hor', models.PositiveSmallIntegerField(default=11, verbose_name='fullscreen button horizontal offset')),
                ('slider_fullscreen_button_offset_vert', models.PositiveSmallIntegerField(default=9, verbose_name='fullscreen button vertical offset')),
                ('slider_fullscreen_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider fullscreen button, if empty inherit from gallery skin.', max_length=255, verbose_name='fullscreen button skin')),
                ('slider_item_padding_bottom', models.PositiveSmallIntegerField(default=0, verbose_name='slider item bottom padding')),
                ('slider_item_padding_left', models.PositiveSmallIntegerField(default=0, verbose_name='slider item left padding')),
                ('slider_item_padding_right', models.PositiveSmallIntegerField(default=0, verbose_name='slider item right padding')),
                ('slider_item_padding_top', models.PositiveSmallIntegerField(default=0, verbose_name='slider item top padding')),
                ('slider_loader_color', models.CharField(choices=[('white', 'White'), ('black', 'Black')], default='white', max_length=6, verbose_name='loader color')),
                ('slider_loader_type', models.PositiveSmallIntegerField(choices=[(1, 'Shape 1'), (2, 'Shape 2'), (3, 'Shape 3'), (4, 'Shape 4'), (5, 'Shape 5'), (6, 'Shape 6'), (7, 'Shape 7')], default=1, verbose_name='shape of the loader')),
                ('slider_play_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Play button horizonatal alignment.', max_length=6, verbose_name='play button alignment')),
                ('slider_play_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='play button vertical alignment')),
                ('slider_play_button_offset_hor', models.PositiveSmallIntegerField(default=40, verbose_name='play button horizontal offset')),
                ('slider_play_button_offset_vert', models.PositiveSmallIntegerField(default=8, verbose_name='play button vertical offset')),
                ('slider_play_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider play button, if empty inherit from gallery skin.', max_length=255, verbose_name='play button skin')),
                ('slider_progressbar_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='progress bar color')),
                ('slider_progressbar_line_width', models.PositiveSmallIntegerField(default=5, verbose_name='progress bar line width')),
                ('slider_progressbar_opacity', models.PositiveSmallIntegerField(default=60, help_text='The opacity of the progress bar.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='progress bar opacity (%)')),
                ('slider_progresspie_color1', colorfield.fields.ColorField(default='#B5B5B5', max_length=18, verbose_name='progress pie first color')),
                ('slider_progresspie_color2', colorfield.fields.ColorField(default='#E5E5E5', max_length=18, verbose_name='progress pie second color')),
                ('slider_progresspie_height', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie height')),
                ('slider_progresspie_stroke_width', models.PositiveSmallIntegerField(default=6, verbose_name='progress pie stroke width')),
                ('slider_progresspie_type_fill', models.BooleanField(choices=[(False, 'Stroke'), (True, 'Fill')], default=False, verbose_name='progress pie type')),
                ('slider_progresspie_width', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie width')),
                ('slider_progress_indicator_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Progress indicator horizonatal alignment.', max_length=6, verbose_name='progress indicator alignment')),
                ('slider_progress_indicator_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='progress indicator vertical alignment')),
                ('slider_progress_indicator_offset_hor', models.PositiveSmallIntegerField(default=16, verbose_name='progress indicator horizontal offset ')),
                ('slider_progress_indicator_offset_vert', models.PositiveSmallIntegerField(default=36, verbose_name='progress indicator vertical offset ')),
                ('slider_progress_indicator_type', models.CharField(choices=[('pie', 'Pie'), ('pie2', 'Pie 2'), ('bar', 'Bar')], default='pie', help_text='if pie not supported, it will switch to bar automatically.', max_length=4, verbose_name='progress indicator type')),
                ('slider_scale_mode', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode')),
                ('slider_scale_mode_fullscreen', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='down', max_length=4, verbose_name='fullscreen scale mode')),
                ('slider_scale_mode_media', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode on media items')),
                ('slider_textpanel_always_on', models.BooleanField(default=True, help_text='Text panel are always on or show only on mouseover.', verbose_name='text panel always on')),
                ('slider_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='text panel background color')),
                ('slider_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, verbose_name='text panel background CSS')),
                ('slider_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='text panel background opacity (%)')),
                ('slider_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='text panel description CSS')),
                ('slider_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='text panel title CSS')),
                ('slider_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('slider_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel description text color')),
                ('slider_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('slider_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('slider_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_textpanel_enable_bg', models.BooleanField(default=True, help_text='Enable the textpanel background.', verbose_name='enable background')),
                ('slider_textpanel_enable_description', models.BooleanField(default=True, help_text='Enable the description text.', verbose_name='enable description')),
                ('slider_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('slider_textpanel_fade_duration', models.PositiveSmallIntegerField(default=200, verbose_name='text panel fade duration ')),
                ('slider_textpanel_height', models.PositiveSmallIntegerField(blank=True, default=None, help_text='If blank it will be set dynamically.', null=True, verbose_name='text panel height ')),
                ('slider_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=10, verbose_name='text panel bottom padding')),
                ('slider_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, verbose_name='text panel left padding')),
                ('slider_textpanel_padding_right', models.PositiveSmallIntegerField(default=10, verbose_name='text panel right padding')),
                ('slider_textpanel_padding_title_description', models.PositiveSmallIntegerField(default=5, help_text='the space between the title and the description.', verbose_name='text panel title padding')),
                ('slider_textpanel_padding_top', models.PositiveSmallIntegerField(default=10, verbose_name='text panel top padding')),
                ('slider_textpanel_text_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='text panel vertical alignment')),
                ('slider_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold title')),
                ('slider_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel title text color')),
                ('slider_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('slider_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='title font size (px)')),
                ('slider_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_transition', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='The transition of the slide change.', max_length=5, verbose_name='transition')),
                ('slider_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Transition easing function of slide change.', max_length=17, verbose_name='transition easing')),
                ('slider_transition_speed', models.PositiveSmallIntegerField(default=300, help_text='Transition duration of slide change.', verbose_name='transition speed')),
                ('slider_videoplay_button_type', models.CharField(choices=[('square', 'Square'), ('round', 'Round')], default='square', max_length=6, verbose_name='videoplay button type')),
                ('slider_zoompanel_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Zoom panel horizonatal alignment.', max_length=6, verbose_name='zoom panel alignment')),
                ('slider_zoompanel_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='zoom panel vertical alignment')),
                ('slider_zoompanel_offset_hor', models.PositiveSmallIntegerField(default=12, verbose_name='zoom panel horizontal offset')),
                ('slider_zoompanel_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='zoom panel vertical offset')),
                ('slider_zoompanel_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider zoom panel, if empty inherit from gallery skin.', max_length=255, verbose_name='zoom panel skin')),
                ('slider_zoom_max_ratio', models.PositiveSmallIntegerField(default=6, verbose_name='maximum zoom ratio')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=400, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_skin', models.CharField(choices=[('default', 'Default'), ('alexis', 'Alexis')], max_length=255, verbose_name='gallery skin')),
                ('gallery_width', models.PositiveSmallIntegerField(default=900, help_text='Gallery width.', verbose_name='width')),
                ('gallery_autoplay', models.BooleanField(default=False, help_text='Begin slideshow autoplay on start.', verbose_name='gallery autoplay')),
                ('gallery_carousel', models.BooleanField(default=True, help_text='Next button on last image goes to first image.', verbose_name='carousel')),
                ('gallery_control_keyboard', models.BooleanField(default=True, help_text='Enable / disable keyboard controls.', verbose_name='keyboard')),
                ('gallery_control_thumbs_mousewheel', models.BooleanField(default=False, help_text='Enable / disable the mousewheel.', verbose_name='mousewheel')),
                ('gallery_debug_errors', models.BooleanField(default=True, help_text='show error message when there is some error on the gallery area.', verbose_name='debug errors')),
                ('gallery_height', models.PositiveSmallIntegerField(default=500, help_text='Gallery height.', verbose_name='height')),
                ('gallery_images_preload_type', models.CharField(choices=[('all', 'load all the images first time'), ('minimal', 'only image nabours will be loaded each time'), ('visible', 'visible thumbs images will be loaded each time')], default='minimal', help_text='Preload type of the images.', max_length=8, verbose_name='preload type')),
                ('gallery_min_height', models.PositiveSmallIntegerField(default=300, help_text='Gallery minimal height when resizing.', verbose_name='minimum height')),
                ('gallery_pause_on_mouseover', models.BooleanField(default=False, help_text='Pause on mouseover when playing slideshow.', verbose_name='pause on mouseover')),
                ('gallery_play_interval', models.PositiveSmallIntegerField(default=3000, help_text='Play interval of the slideshow.', verbose_name='play interval')),
                ('gallery_preserve_ratio', models.BooleanField(default=True, help_text='Preserve aspect ratio on window resize.', verbose_name='carousel')),
                ('thumb_border_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='border color')),
                ('thumb_border_effect', models.BooleanField(default=True, help_text='Specify if the thumb has border.', verbose_name='border effect')),
                ('thumb_border_width', models.PositiveSmallIntegerField(default=0, verbose_name='border width')),
                ('thumb_color_overlay_effect', models.BooleanField(default=True, help_text='Thumbnail color overlay effect, release the overlay on mouseover and selected states.', verbose_name='color overlay effect')),
                ('thumb_fixed_size', models.BooleanField(choices=[(True, 'Fixed'), (False, 'Dynamic')], default=True, help_text='Fixed/dynamic thumbnail width.', verbose_name='sizing method')),
                ('thumb_height', models.PositiveSmallIntegerField(default=50, verbose_name='height')),
                ('thumb_image_overlay_effect', models.BooleanField(default=False, help_text='Images overlay effect on normal state only.', verbose_name='image overlay effect')),
                ('thumb_image_overlay_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image overlay type')),
                ('thumb_loader_type', models.CharField(choices=[('dark', 'Dark'), ('light', 'Light')], default='dark', max_length=8, verbose_name='loader type')),
                ('thumb_overlay_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='overlay color')),
                ('thumb_overlay_opacity', models.PositiveSmallIntegerField(default=40, help_text='Thumbnail overlay color opacity.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('thumb_overlay_reverse', models.BooleanField(default=False, help_text='Reverse the overlay, will be shown on selected state only.', verbose_name='overlay reverse')),
                ('thumb_over_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in mouseover state.', max_length=18, verbose_name='mouseover border color')),
                ('thumb_over_border_width', models.PositiveSmallIntegerField(default=0, help_text='Thumbnail border width in mouseover state.', verbose_name='mouseover border width')),
                ('thumb_round_corners_radius', models.PositiveSmallIntegerField(default=0, verbose_name='border radius')),
                ('thumb_selected_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in selected state.', max_length=18, verbose_name='selected border color')),
                ('thumb_selected_border_width', models.PositiveSmallIntegerField(default=1, help_text='Thumbnail border width in selected state.', verbose_name='selected border width')),
                ('thumb_show_loader', models.BooleanField(default=True, help_text='Show thumb loader while loading the thumb.', verbose_name='show loader')),
                ('thumb_transition_duration', models.PositiveSmallIntegerField(default=200, help_text='Thumbnail effect transition duration.', verbose_name='transition duration')),
                ('thumb_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutQuad', help_text='Thumb effect transition easing.', max_length=17, verbose_name='transition easing')),
                ('thumb_width', models.PositiveSmallIntegerField(default=88, verbose_name='width')),
                ('strippanel_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='background color of the strip wrapper, if not set, it will be taken from the CSS.', max_length=18, verbose_name='background color')),
                ('strippanel_buttons_role', models.CharField(choices=[('scroll_strip', 'Scroll strip'), ('advance_item', 'Advance item')], default='scroll_strip', help_text='Role of the side buttons.', max_length=12, verbose_name='buttons role')),
                ('strippanel_buttons_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the buttons, if empty inherit from gallery skin.', max_length=255, verbose_name='buttons skin')),
                ('strippanel_enable_buttons', models.BooleanField(default=False, help_text='Enable buttons from the sides of the panel.', verbose_name='enable buttons')),
                ('strippanel_enable_handle', models.BooleanField(default=True, verbose_name='enable handle')),
                ('strippanel_handle_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='top', help_text='Close handle tip alignment on the handle bar according panel orientation.', max_length=6, verbose_name='handle alignment')),
                ('strippanel_handle_offset', models.PositiveSmallIntegerField(default=0, help_text='Offset of handle bar according the valign.', verbose_name='handle offset')),
                ('strippanel_handle_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the handle, if empty inherit from gallery skin.', max_length=255, verbose_name='handle skin')),
                ('strippanel_padding_bottom', models.PositiveSmallIntegerField(default=8, help_text='Space from bottom of the panel.', verbose_name='bottom padding')),
                ('strippanel_padding_buttons', models.PositiveSmallIntegerField(default=2, help_text='Padding between the buttons and the panel.', verbose_name='buttons padding')),
                ('strippanel_padding_left', models.PositiveSmallIntegerField(default=0, help_text='Space from left of the panel.', verbose_name='left padding')),
                ('strippanel_padding_right', models.PositiveSmallIntegerField(default=0, help_text='Space from right of the panel.', verbose_name='right padding')),
                ('strippanel_padding_top', models.PositiveSmallIntegerField(default=8, help_text='Space from top of the panel.', verbose_name='top padding')),
                ('strip_control_avia', models.BooleanField(default=False, help_text='Move the strip according strip moseover position.', verbose_name='avia control')),
                ('strip_control_touch', models.BooleanField(default=True, help_text='Move the strip by dragging it.', verbose_name='touch control')),
                ('strip_scroll_to_thumb_duration', models.PositiveSmallIntegerField(default=500, help_text='Duration of scrolling to thumb.', verbose_name='scroll animation duration')),
                ('strip_scroll_to_thumb_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutCubic', help_text='Easing of scrolling to thumb animation.', max_length=17, verbose_name='scroll animation')),
                ('strip_space_between_thumbs', models.PositiveSmallIntegerField(default=6, verbose_name='space between thumbnails')),
                ('strip_thumbs_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Alignment of the thumbnails when smaller than the strip size.', max_length=6, verbose_name='thumbnail alignment')),
                ('strip_thumb_touch_sensetivity', models.PositiveSmallIntegerField(default=2, help_text='1: most sensetive; 100: least sensetive.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='touch sensitivity')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defaulttheme_unite_plugins_full', related_query_name='defaulttheme_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Default theme plugin',
                'verbose_name_plural': 'Default theme plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='DefaultThemeSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme_hide_panel_under_width', models.PositiveSmallIntegerField(blank=True, default=480, help_text="Hide panel under certain browser width, if null, don't hide.", null=True, verbose_name='hide panel under width')),
                ('theme_enable_fullscreen_button', models.BooleanField(default=True, help_text='Show, hide the theme fullscreen button. The position in the theme is constant.', verbose_name='enable fullscreen button')),
                ('theme_enable_hidepanel_button', models.BooleanField(default=True, help_text='Show, hide the hidepanel button.', verbose_name='enable hidepanel button')),
                ('theme_enable_play_button', models.BooleanField(default=True, help_text='Show, hide the theme play button. The position in the theme is constant.', verbose_name='enable play button')),
                ('theme_enable_text_panel', models.BooleanField(default=True, help_text='Enable the panel text panel.', verbose_name='enable text panel')),
                ('theme_text_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='The align of the text in the textpanel.', max_length=6, verbose_name='text align')),
                ('theme_text_padding_left', models.PositiveSmallIntegerField(default=20, help_text='Left padding of the text in the textpanel.', verbose_name='text padding left')),
                ('theme_text_padding_right', models.PositiveSmallIntegerField(default=5, help_text='Right padding of the text in the textpanel.', verbose_name='text padding right')),
                ('theme_text_type', models.CharField(choices=[('title', 'Title'), ('description', 'Description')], default='title', help_text='text that will be shown on the text panel, title or description.', max_length=6, verbose_name='text align')),
                ('slider_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('slider_arrow_left_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Left arrow horizonal alignment.', max_length=6, verbose_name='left arrow alignment')),
                ('slider_arrow_left_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='left arrow vertical alignment')),
                ('slider_arrow_left_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='left arrow horizontal offset')),
                ('slider_arrow_left_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='left arrow vertical offset')),
                ('slider_arrow_right_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Right arrow horizonal alignment.', max_length=6, verbose_name='Right arrow alignment')),
                ('slider_arrow_right_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='light arrow vertical alignment')),
                ('slider_arrow_right_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='right arrow horizontal offset')),
                ('slider_arrow_right_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='right arrow vertical offset')),
                ('slider_bullets_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Bullets horizontal alignment.', max_length=6, verbose_name='bullets alignment')),
                ('slider_bullets_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='bottom', max_length=6, verbose_name='bullets vertical alignment')),
                ('slider_bullets_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='bullets horizontal offset')),
                ('slider_bullets_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='bullets vertical offset')),
                ('slider_bullets_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the bullets, if blank inherit from gallery skin.', max_length=255, verbose_name='bullets skin')),
                ('slider_bullets_space_between', models.SmallIntegerField(blank=True, default=None, help_text='Set the space between bullets. If blank then will be set default space from the skins.', null=True, verbose_name='space between bullets')),
                ('slider_controls_always_on', models.BooleanField(default=True, help_text='Controls are always on, false - show only on mouseover.', verbose_name='controls always on')),
                ('slider_controls_appear_duration', models.PositiveSmallIntegerField(default=300, help_text='The duration of appearing controls.', verbose_name='controls appear duration')),
                ('slider_controls_appear_ontap', models.BooleanField(default=True, help_text='Appear controls on tap event on touch devices.', verbose_name='controls appear on tap')),
                ('slider_control_swipe', models.BooleanField(default=True, verbose_name='enable swiping control')),
                ('slider_control_zoom', models.BooleanField(default=True, verbose_name='enable zooming control')),
                ('slider_enable_arrows', models.BooleanField(default=True, verbose_name='enable arrows')),
                ('slider_enable_bullets', models.BooleanField(default=False, verbose_name='enable bullets')),
                ('slider_enable_fullscreen_button', models.BooleanField(default=True, verbose_name='enable fullscreen button')),
                ('slider_enable_play_button', models.BooleanField(default=True, verbose_name='enable play button')),
                ('slider_enable_progress_indicator', models.BooleanField(default=True, verbose_name='enable progress indicator')),
                ('slider_enable_text_panel', models.BooleanField(default=False, verbose_name='enable text panel')),
                ('slider_enable_zoom_panel', models.BooleanField(default=True, help_text='Enable the zoom buttons, works together with zoom control.', verbose_name='enable zoom panel')),
                ('slider_fullscreen_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Fullscreen button horizonatal alignment.', max_length=6, verbose_name='fullscreen button alignment')),
                ('slider_fullscreen_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='fullscreen button vertical alignment')),
                ('slider_fullscreen_button_offset_hor', models.PositiveSmallIntegerField(default=11, verbose_name='fullscreen button horizontal offset')),
                ('slider_fullscreen_button_offset_vert', models.PositiveSmallIntegerField(default=9, verbose_name='fullscreen button vertical offset')),
                ('slider_fullscreen_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider fullscreen button, if empty inherit from gallery skin.', max_length=255, verbose_name='fullscreen button skin')),
                ('slider_item_padding_bottom', models.PositiveSmallIntegerField(default=0, verbose_name='slider item bottom padding')),
                ('slider_item_padding_left', models.PositiveSmallIntegerField(default=0, verbose_name='slider item left padding')),
                ('slider_item_padding_right', models.PositiveSmallIntegerField(default=0, verbose_name='slider item right padding')),
                ('slider_item_padding_top', models.PositiveSmallIntegerField(default=0, verbose_name='slider item top padding')),
                ('slider_loader_color', models.CharField(choices=[('white', 'White'), ('black', 'Black')], default='white', max_length=6, verbose_name='loader color')),
                ('slider_loader_type', models.PositiveSmallIntegerField(choices=[(1, 'Shape 1'), (2, 'Shape 2'), (3, 'Shape 3'), (4, 'Shape 4'), (5, 'Shape 5'), (6, 'Shape 6'), (7, 'Shape 7')], default=1, verbose_name='shape of the loader')),
                ('slider_play_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Play button horizonatal alignment.', max_length=6, verbose_name='play button alignment')),
                ('slider_play_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='play button vertical alignment')),
                ('slider_play_button_offset_hor', models.PositiveSmallIntegerField(default=40, verbose_name='play button horizontal offset')),
                ('slider_play_button_offset_vert', models.PositiveSmallIntegerField(default=8, verbose_name='play button vertical offset')),
                ('slider_play_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider play button, if empty inherit from gallery skin.', max_length=255, verbose_name='play button skin')),
                ('slider_progressbar_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='progress bar color')),
                ('slider_progressbar_line_width', models.PositiveSmallIntegerField(default=5, verbose_name='progress bar line width')),
                ('slider_progressbar_opacity', models.PositiveSmallIntegerField(default=60, help_text='The opacity of the progress bar.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='progress bar opacity (%)')),
                ('slider_progresspie_color1', colorfield.fields.ColorField(default='#B5B5B5', max_length=18, verbose_name='progress pie first color')),
                ('slider_progresspie_color2', colorfield.fields.ColorField(default='#E5E5E5', max_length=18, verbose_name='progress pie second color')),
                ('slider_progresspie_height', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie height')),
                ('slider_progresspie_stroke_width', models.PositiveSmallIntegerField(default=6, verbose_name='progress pie stroke width')),
                ('slider_progresspie_type_fill', models.BooleanField(choices=[(False, 'Stroke'), (True, 'Fill')], default=False, verbose_name='progress pie type')),
                ('slider_progresspie_width', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie width')),
                ('slider_progress_indicator_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Progress indicator horizonatal alignment.', max_length=6, verbose_name='progress indicator alignment')),
                ('slider_progress_indicator_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='progress indicator vertical alignment')),
                ('slider_progress_indicator_offset_hor', models.PositiveSmallIntegerField(default=16, verbose_name='progress indicator horizontal offset ')),
                ('slider_progress_indicator_offset_vert', models.PositiveSmallIntegerField(default=36, verbose_name='progress indicator vertical offset ')),
                ('slider_progress_indicator_type', models.CharField(choices=[('pie', 'Pie'), ('pie2', 'Pie 2'), ('bar', 'Bar')], default='pie', help_text='if pie not supported, it will switch to bar automatically.', max_length=4, verbose_name='progress indicator type')),
                ('slider_scale_mode', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode')),
                ('slider_scale_mode_fullscreen', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='down', max_length=4, verbose_name='fullscreen scale mode')),
                ('slider_scale_mode_media', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode on media items')),
                ('slider_textpanel_always_on', models.BooleanField(default=True, help_text='Text panel are always on or show only on mouseover.', verbose_name='text panel always on')),
                ('slider_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='text panel background color')),
                ('slider_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, verbose_name='text panel background CSS')),
                ('slider_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='text panel background opacity (%)')),
                ('slider_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='text panel description CSS')),
                ('slider_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='text panel title CSS')),
                ('slider_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('slider_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel description text color')),
                ('slider_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('slider_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('slider_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_textpanel_enable_bg', models.BooleanField(default=True, help_text='Enable the textpanel background.', verbose_name='enable background')),
                ('slider_textpanel_enable_description', models.BooleanField(default=True, help_text='Enable the description text.', verbose_name='enable description')),
                ('slider_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('slider_textpanel_fade_duration', models.PositiveSmallIntegerField(default=200, verbose_name='text panel fade duration ')),
                ('slider_textpanel_height', models.PositiveSmallIntegerField(blank=True, default=None, help_text='If blank it will be set dynamically.', null=True, verbose_name='text panel height ')),
                ('slider_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=10, verbose_name='text panel bottom padding')),
                ('slider_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, verbose_name='text panel left padding')),
                ('slider_textpanel_padding_right', models.PositiveSmallIntegerField(default=10, verbose_name='text panel right padding')),
                ('slider_textpanel_padding_title_description', models.PositiveSmallIntegerField(default=5, help_text='the space between the title and the description.', verbose_name='text panel title padding')),
                ('slider_textpanel_padding_top', models.PositiveSmallIntegerField(default=10, verbose_name='text panel top padding')),
                ('slider_textpanel_text_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='text panel vertical alignment')),
                ('slider_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold title')),
                ('slider_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel title text color')),
                ('slider_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('slider_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='title font size (px)')),
                ('slider_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_transition', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='The transition of the slide change.', max_length=5, verbose_name='transition')),
                ('slider_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Transition easing function of slide change.', max_length=17, verbose_name='transition easing')),
                ('slider_transition_speed', models.PositiveSmallIntegerField(default=300, help_text='Transition duration of slide change.', verbose_name='transition speed')),
                ('slider_videoplay_button_type', models.CharField(choices=[('square', 'Square'), ('round', 'Round')], default='square', max_length=6, verbose_name='videoplay button type')),
                ('slider_zoompanel_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Zoom panel horizonatal alignment.', max_length=6, verbose_name='zoom panel alignment')),
                ('slider_zoompanel_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='zoom panel vertical alignment')),
                ('slider_zoompanel_offset_hor', models.PositiveSmallIntegerField(default=12, verbose_name='zoom panel horizontal offset')),
                ('slider_zoompanel_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='zoom panel vertical offset')),
                ('slider_zoompanel_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider zoom panel, if empty inherit from gallery skin.', max_length=255, verbose_name='zoom panel skin')),
                ('slider_zoom_max_ratio', models.PositiveSmallIntegerField(default=6, verbose_name='maximum zoom ratio')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=400, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_skin', models.CharField(choices=[('default', 'Default'), ('alexis', 'Alexis')], max_length=255, verbose_name='gallery skin')),
                ('gallery_width', models.PositiveSmallIntegerField(default=900, help_text='Gallery width.', verbose_name='width')),
                ('gallery_autoplay', models.BooleanField(default=False, help_text='Begin slideshow autoplay on start.', verbose_name='gallery autoplay')),
                ('gallery_carousel', models.BooleanField(default=True, help_text='Next button on last image goes to first image.', verbose_name='carousel')),
                ('gallery_control_keyboard', models.BooleanField(default=True, help_text='Enable / disable keyboard controls.', verbose_name='keyboard')),
                ('gallery_control_thumbs_mousewheel', models.BooleanField(default=False, help_text='Enable / disable the mousewheel.', verbose_name='mousewheel')),
                ('gallery_debug_errors', models.BooleanField(default=True, help_text='show error message when there is some error on the gallery area.', verbose_name='debug errors')),
                ('gallery_height', models.PositiveSmallIntegerField(default=500, help_text='Gallery height.', verbose_name='height')),
                ('gallery_images_preload_type', models.CharField(choices=[('all', 'load all the images first time'), ('minimal', 'only image nabours will be loaded each time'), ('visible', 'visible thumbs images will be loaded each time')], default='minimal', help_text='Preload type of the images.', max_length=8, verbose_name='preload type')),
                ('gallery_min_height', models.PositiveSmallIntegerField(default=300, help_text='Gallery minimal height when resizing.', verbose_name='minimum height')),
                ('gallery_pause_on_mouseover', models.BooleanField(default=False, help_text='Pause on mouseover when playing slideshow.', verbose_name='pause on mouseover')),
                ('gallery_play_interval', models.PositiveSmallIntegerField(default=3000, help_text='Play interval of the slideshow.', verbose_name='play interval')),
                ('gallery_preserve_ratio', models.BooleanField(default=True, help_text='Preserve aspect ratio on window resize.', verbose_name='carousel')),
                ('thumb_border_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='border color')),
                ('thumb_border_effect', models.BooleanField(default=True, help_text='Specify if the thumb has border.', verbose_name='border effect')),
                ('thumb_border_width', models.PositiveSmallIntegerField(default=0, verbose_name='border width')),
                ('thumb_color_overlay_effect', models.BooleanField(default=True, help_text='Thumbnail color overlay effect, release the overlay on mouseover and selected states.', verbose_name='color overlay effect')),
                ('thumb_fixed_size', models.BooleanField(choices=[(True, 'Fixed'), (False, 'Dynamic')], default=True, help_text='Fixed/dynamic thumbnail width.', verbose_name='sizing method')),
                ('thumb_height', models.PositiveSmallIntegerField(default=50, verbose_name='height')),
                ('thumb_image_overlay_effect', models.BooleanField(default=False, help_text='Images overlay effect on normal state only.', verbose_name='image overlay effect')),
                ('thumb_image_overlay_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image overlay type')),
                ('thumb_loader_type', models.CharField(choices=[('dark', 'Dark'), ('light', 'Light')], default='dark', max_length=8, verbose_name='loader type')),
                ('thumb_overlay_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='overlay color')),
                ('thumb_overlay_opacity', models.PositiveSmallIntegerField(default=40, help_text='Thumbnail overlay color opacity.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('thumb_overlay_reverse', models.BooleanField(default=False, help_text='Reverse the overlay, will be shown on selected state only.', verbose_name='overlay reverse')),
                ('thumb_over_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in mouseover state.', max_length=18, verbose_name='mouseover border color')),
                ('thumb_over_border_width', models.PositiveSmallIntegerField(default=0, help_text='Thumbnail border width in mouseover state.', verbose_name='mouseover border width')),
                ('thumb_round_corners_radius', models.PositiveSmallIntegerField(default=0, verbose_name='border radius')),
                ('thumb_selected_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in selected state.', max_length=18, verbose_name='selected border color')),
                ('thumb_selected_border_width', models.PositiveSmallIntegerField(default=1, help_text='Thumbnail border width in selected state.', verbose_name='selected border width')),
                ('thumb_show_loader', models.BooleanField(default=True, help_text='Show thumb loader while loading the thumb.', verbose_name='show loader')),
                ('thumb_transition_duration', models.PositiveSmallIntegerField(default=200, help_text='Thumbnail effect transition duration.', verbose_name='transition duration')),
                ('thumb_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutQuad', help_text='Thumb effect transition easing.', max_length=17, verbose_name='transition easing')),
                ('thumb_width', models.PositiveSmallIntegerField(default=88, verbose_name='width')),
                ('strippanel_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='background color of the strip wrapper, if not set, it will be taken from the CSS.', max_length=18, verbose_name='background color')),
                ('strippanel_buttons_role', models.CharField(choices=[('scroll_strip', 'Scroll strip'), ('advance_item', 'Advance item')], default='scroll_strip', help_text='Role of the side buttons.', max_length=12, verbose_name='buttons role')),
                ('strippanel_buttons_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the buttons, if empty inherit from gallery skin.', max_length=255, verbose_name='buttons skin')),
                ('strippanel_enable_buttons', models.BooleanField(default=False, help_text='Enable buttons from the sides of the panel.', verbose_name='enable buttons')),
                ('strippanel_enable_handle', models.BooleanField(default=True, verbose_name='enable handle')),
                ('strippanel_handle_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='top', help_text='Close handle tip alignment on the handle bar according panel orientation.', max_length=6, verbose_name='handle alignment')),
                ('strippanel_handle_offset', models.PositiveSmallIntegerField(default=0, help_text='Offset of handle bar according the valign.', verbose_name='handle offset')),
                ('strippanel_handle_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the handle, if empty inherit from gallery skin.', max_length=255, verbose_name='handle skin')),
                ('strippanel_padding_bottom', models.PositiveSmallIntegerField(default=8, help_text='Space from bottom of the panel.', verbose_name='bottom padding')),
                ('strippanel_padding_buttons', models.PositiveSmallIntegerField(default=2, help_text='Padding between the buttons and the panel.', verbose_name='buttons padding')),
                ('strippanel_padding_left', models.PositiveSmallIntegerField(default=0, help_text='Space from left of the panel.', verbose_name='left padding')),
                ('strippanel_padding_right', models.PositiveSmallIntegerField(default=0, help_text='Space from right of the panel.', verbose_name='right padding')),
                ('strippanel_padding_top', models.PositiveSmallIntegerField(default=8, help_text='Space from top of the panel.', verbose_name='top padding')),
                ('strip_control_avia', models.BooleanField(default=False, help_text='Move the strip according strip moseover position.', verbose_name='avia control')),
                ('strip_control_touch', models.BooleanField(default=True, help_text='Move the strip by dragging it.', verbose_name='touch control')),
                ('strip_scroll_to_thumb_duration', models.PositiveSmallIntegerField(default=500, help_text='Duration of scrolling to thumb.', verbose_name='scroll animation duration')),
                ('strip_scroll_to_thumb_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutCubic', help_text='Easing of scrolling to thumb animation.', max_length=17, verbose_name='scroll animation')),
                ('strip_space_between_thumbs', models.PositiveSmallIntegerField(default=6, verbose_name='space between thumbnails')),
                ('strip_thumbs_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Alignment of the thumbnails when smaller than the strip size.', max_length=6, verbose_name='thumbnail alignment')),
                ('strip_thumb_touch_sensetivity', models.PositiveSmallIntegerField(default=2, help_text='1: most sensetive; 100: least sensetive.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='touch sensitivity')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Default theme unite options',
                'verbose_name_plural': 'Default theme unite options',
            },
        ),
        migrations.CreateModel(
            name='GridThemePlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_gridthemeplugin', serialize=False, to='cms.CMSPlugin')),
                ('theme_hide_panel_under_width', models.PositiveSmallIntegerField(blank=True, default=480, help_text="Hide panel under certain browser width, if null, don't hide.", null=True, verbose_name='hide panel under width')),
                ('theme_panel_position', models.CharField(choices=[('top', 'Top'), ('bottom', 'Bottom'), ('left', 'Left'), ('right', 'Right')], default='right', help_text='Thumbs panel position.', max_length=6, verbose_name='panel position')),
                ('slider_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('slider_arrow_left_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Left arrow horizonal alignment.', max_length=6, verbose_name='left arrow alignment')),
                ('slider_arrow_left_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='left arrow vertical alignment')),
                ('slider_arrow_left_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='left arrow horizontal offset')),
                ('slider_arrow_left_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='left arrow vertical offset')),
                ('slider_arrow_right_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Right arrow horizonal alignment.', max_length=6, verbose_name='Right arrow alignment')),
                ('slider_arrow_right_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='light arrow vertical alignment')),
                ('slider_arrow_right_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='right arrow horizontal offset')),
                ('slider_arrow_right_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='right arrow vertical offset')),
                ('slider_bullets_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Bullets horizontal alignment.', max_length=6, verbose_name='bullets alignment')),
                ('slider_bullets_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='bottom', max_length=6, verbose_name='bullets vertical alignment')),
                ('slider_bullets_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='bullets horizontal offset')),
                ('slider_bullets_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='bullets vertical offset')),
                ('slider_bullets_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the bullets, if blank inherit from gallery skin.', max_length=255, verbose_name='bullets skin')),
                ('slider_bullets_space_between', models.SmallIntegerField(blank=True, default=None, help_text='Set the space between bullets. If blank then will be set default space from the skins.', null=True, verbose_name='space between bullets')),
                ('slider_controls_always_on', models.BooleanField(default=True, help_text='Controls are always on, false - show only on mouseover.', verbose_name='controls always on')),
                ('slider_controls_appear_duration', models.PositiveSmallIntegerField(default=300, help_text='The duration of appearing controls.', verbose_name='controls appear duration')),
                ('slider_controls_appear_ontap', models.BooleanField(default=True, help_text='Appear controls on tap event on touch devices.', verbose_name='controls appear on tap')),
                ('slider_control_swipe', models.BooleanField(default=True, verbose_name='enable swiping control')),
                ('slider_control_zoom', models.BooleanField(default=True, verbose_name='enable zooming control')),
                ('slider_enable_arrows', models.BooleanField(default=True, verbose_name='enable arrows')),
                ('slider_enable_bullets', models.BooleanField(default=False, verbose_name='enable bullets')),
                ('slider_enable_fullscreen_button', models.BooleanField(default=True, verbose_name='enable fullscreen button')),
                ('slider_enable_play_button', models.BooleanField(default=True, verbose_name='enable play button')),
                ('slider_enable_progress_indicator', models.BooleanField(default=True, verbose_name='enable progress indicator')),
                ('slider_enable_text_panel', models.BooleanField(default=False, verbose_name='enable text panel')),
                ('slider_enable_zoom_panel', models.BooleanField(default=True, help_text='Enable the zoom buttons, works together with zoom control.', verbose_name='enable zoom panel')),
                ('slider_fullscreen_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Fullscreen button horizonatal alignment.', max_length=6, verbose_name='fullscreen button alignment')),
                ('slider_fullscreen_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='fullscreen button vertical alignment')),
                ('slider_fullscreen_button_offset_hor', models.PositiveSmallIntegerField(default=11, verbose_name='fullscreen button horizontal offset')),
                ('slider_fullscreen_button_offset_vert', models.PositiveSmallIntegerField(default=9, verbose_name='fullscreen button vertical offset')),
                ('slider_fullscreen_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider fullscreen button, if empty inherit from gallery skin.', max_length=255, verbose_name='fullscreen button skin')),
                ('slider_item_padding_bottom', models.PositiveSmallIntegerField(default=0, verbose_name='slider item bottom padding')),
                ('slider_item_padding_left', models.PositiveSmallIntegerField(default=0, verbose_name='slider item left padding')),
                ('slider_item_padding_right', models.PositiveSmallIntegerField(default=0, verbose_name='slider item right padding')),
                ('slider_item_padding_top', models.PositiveSmallIntegerField(default=0, verbose_name='slider item top padding')),
                ('slider_loader_color', models.CharField(choices=[('white', 'White'), ('black', 'Black')], default='white', max_length=6, verbose_name='loader color')),
                ('slider_loader_type', models.PositiveSmallIntegerField(choices=[(1, 'Shape 1'), (2, 'Shape 2'), (3, 'Shape 3'), (4, 'Shape 4'), (5, 'Shape 5'), (6, 'Shape 6'), (7, 'Shape 7')], default=1, verbose_name='shape of the loader')),
                ('slider_play_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Play button horizonatal alignment.', max_length=6, verbose_name='play button alignment')),
                ('slider_play_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='play button vertical alignment')),
                ('slider_play_button_offset_hor', models.PositiveSmallIntegerField(default=40, verbose_name='play button horizontal offset')),
                ('slider_play_button_offset_vert', models.PositiveSmallIntegerField(default=8, verbose_name='play button vertical offset')),
                ('slider_play_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider play button, if empty inherit from gallery skin.', max_length=255, verbose_name='play button skin')),
                ('slider_progressbar_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='progress bar color')),
                ('slider_progressbar_line_width', models.PositiveSmallIntegerField(default=5, verbose_name='progress bar line width')),
                ('slider_progressbar_opacity', models.PositiveSmallIntegerField(default=60, help_text='The opacity of the progress bar.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='progress bar opacity (%)')),
                ('slider_progresspie_color1', colorfield.fields.ColorField(default='#B5B5B5', max_length=18, verbose_name='progress pie first color')),
                ('slider_progresspie_color2', colorfield.fields.ColorField(default='#E5E5E5', max_length=18, verbose_name='progress pie second color')),
                ('slider_progresspie_height', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie height')),
                ('slider_progresspie_stroke_width', models.PositiveSmallIntegerField(default=6, verbose_name='progress pie stroke width')),
                ('slider_progresspie_type_fill', models.BooleanField(choices=[(False, 'Stroke'), (True, 'Fill')], default=False, verbose_name='progress pie type')),
                ('slider_progresspie_width', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie width')),
                ('slider_progress_indicator_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Progress indicator horizonatal alignment.', max_length=6, verbose_name='progress indicator alignment')),
                ('slider_progress_indicator_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='progress indicator vertical alignment')),
                ('slider_progress_indicator_offset_hor', models.PositiveSmallIntegerField(default=16, verbose_name='progress indicator horizontal offset ')),
                ('slider_progress_indicator_offset_vert', models.PositiveSmallIntegerField(default=36, verbose_name='progress indicator vertical offset ')),
                ('slider_progress_indicator_type', models.CharField(choices=[('pie', 'Pie'), ('pie2', 'Pie 2'), ('bar', 'Bar')], default='pie', help_text='if pie not supported, it will switch to bar automatically.', max_length=4, verbose_name='progress indicator type')),
                ('slider_scale_mode', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode')),
                ('slider_scale_mode_fullscreen', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='down', max_length=4, verbose_name='fullscreen scale mode')),
                ('slider_scale_mode_media', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode on media items')),
                ('slider_textpanel_always_on', models.BooleanField(default=True, help_text='Text panel are always on or show only on mouseover.', verbose_name='text panel always on')),
                ('slider_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='text panel background color')),
                ('slider_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, verbose_name='text panel background CSS')),
                ('slider_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='text panel background opacity (%)')),
                ('slider_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='text panel description CSS')),
                ('slider_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='text panel title CSS')),
                ('slider_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('slider_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel description text color')),
                ('slider_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('slider_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('slider_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_textpanel_enable_bg', models.BooleanField(default=True, help_text='Enable the textpanel background.', verbose_name='enable background')),
                ('slider_textpanel_enable_description', models.BooleanField(default=True, help_text='Enable the description text.', verbose_name='enable description')),
                ('slider_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('slider_textpanel_fade_duration', models.PositiveSmallIntegerField(default=200, verbose_name='text panel fade duration ')),
                ('slider_textpanel_height', models.PositiveSmallIntegerField(blank=True, default=None, help_text='If blank it will be set dynamically.', null=True, verbose_name='text panel height ')),
                ('slider_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=10, verbose_name='text panel bottom padding')),
                ('slider_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, verbose_name='text panel left padding')),
                ('slider_textpanel_padding_right', models.PositiveSmallIntegerField(default=10, verbose_name='text panel right padding')),
                ('slider_textpanel_padding_title_description', models.PositiveSmallIntegerField(default=5, help_text='the space between the title and the description.', verbose_name='text panel title padding')),
                ('slider_textpanel_padding_top', models.PositiveSmallIntegerField(default=10, verbose_name='text panel top padding')),
                ('slider_textpanel_text_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='text panel vertical alignment')),
                ('slider_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold title')),
                ('slider_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel title text color')),
                ('slider_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('slider_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='title font size (px)')),
                ('slider_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_transition', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='The transition of the slide change.', max_length=5, verbose_name='transition')),
                ('slider_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Transition easing function of slide change.', max_length=17, verbose_name='transition easing')),
                ('slider_transition_speed', models.PositiveSmallIntegerField(default=300, help_text='Transition duration of slide change.', verbose_name='transition speed')),
                ('slider_videoplay_button_type', models.CharField(choices=[('square', 'Square'), ('round', 'Round')], default='square', max_length=6, verbose_name='videoplay button type')),
                ('slider_zoompanel_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Zoom panel horizonatal alignment.', max_length=6, verbose_name='zoom panel alignment')),
                ('slider_zoompanel_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='zoom panel vertical alignment')),
                ('slider_zoompanel_offset_hor', models.PositiveSmallIntegerField(default=12, verbose_name='zoom panel horizontal offset')),
                ('slider_zoompanel_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='zoom panel vertical offset')),
                ('slider_zoompanel_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider zoom panel, if empty inherit from gallery skin.', max_length=255, verbose_name='zoom panel skin')),
                ('slider_zoom_max_ratio', models.PositiveSmallIntegerField(default=6, verbose_name='maximum zoom ratio')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=400, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_skin', models.CharField(choices=[('default', 'Default'), ('alexis', 'Alexis')], max_length=255, verbose_name='gallery skin')),
                ('gallery_width', models.PositiveSmallIntegerField(default=900, help_text='Gallery width.', verbose_name='width')),
                ('gallery_autoplay', models.BooleanField(default=False, help_text='Begin slideshow autoplay on start.', verbose_name='gallery autoplay')),
                ('gallery_carousel', models.BooleanField(default=True, help_text='Next button on last image goes to first image.', verbose_name='carousel')),
                ('gallery_control_keyboard', models.BooleanField(default=True, help_text='Enable / disable keyboard controls.', verbose_name='keyboard')),
                ('gallery_control_thumbs_mousewheel', models.BooleanField(default=False, help_text='Enable / disable the mousewheel.', verbose_name='mousewheel')),
                ('gallery_debug_errors', models.BooleanField(default=True, help_text='show error message when there is some error on the gallery area.', verbose_name='debug errors')),
                ('gallery_height', models.PositiveSmallIntegerField(default=500, help_text='Gallery height.', verbose_name='height')),
                ('gallery_images_preload_type', models.CharField(choices=[('all', 'load all the images first time'), ('minimal', 'only image nabours will be loaded each time'), ('visible', 'visible thumbs images will be loaded each time')], default='minimal', help_text='Preload type of the images.', max_length=8, verbose_name='preload type')),
                ('gallery_min_height', models.PositiveSmallIntegerField(default=300, help_text='Gallery minimal height when resizing.', verbose_name='minimum height')),
                ('gallery_pause_on_mouseover', models.BooleanField(default=False, help_text='Pause on mouseover when playing slideshow.', verbose_name='pause on mouseover')),
                ('gallery_play_interval', models.PositiveSmallIntegerField(default=3000, help_text='Play interval of the slideshow.', verbose_name='play interval')),
                ('gallery_preserve_ratio', models.BooleanField(default=True, help_text='Preserve aspect ratio on window resize.', verbose_name='carousel')),
                ('thumb_border_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='border color')),
                ('thumb_border_effect', models.BooleanField(default=True, help_text='Specify if the thumb has border.', verbose_name='border effect')),
                ('thumb_border_width', models.PositiveSmallIntegerField(default=0, verbose_name='border width')),
                ('thumb_color_overlay_effect', models.BooleanField(default=True, help_text='Thumbnail color overlay effect, release the overlay on mouseover and selected states.', verbose_name='color overlay effect')),
                ('thumb_fixed_size', models.BooleanField(choices=[(True, 'Fixed'), (False, 'Dynamic')], default=True, help_text='Fixed/dynamic thumbnail width.', verbose_name='sizing method')),
                ('thumb_height', models.PositiveSmallIntegerField(default=50, verbose_name='height')),
                ('thumb_image_overlay_effect', models.BooleanField(default=False, help_text='Images overlay effect on normal state only.', verbose_name='image overlay effect')),
                ('thumb_image_overlay_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image overlay type')),
                ('thumb_loader_type', models.CharField(choices=[('dark', 'Dark'), ('light', 'Light')], default='dark', max_length=8, verbose_name='loader type')),
                ('thumb_overlay_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='overlay color')),
                ('thumb_overlay_opacity', models.PositiveSmallIntegerField(default=40, help_text='Thumbnail overlay color opacity.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('thumb_overlay_reverse', models.BooleanField(default=False, help_text='Reverse the overlay, will be shown on selected state only.', verbose_name='overlay reverse')),
                ('thumb_over_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in mouseover state.', max_length=18, verbose_name='mouseover border color')),
                ('thumb_over_border_width', models.PositiveSmallIntegerField(default=0, help_text='Thumbnail border width in mouseover state.', verbose_name='mouseover border width')),
                ('thumb_round_corners_radius', models.PositiveSmallIntegerField(default=0, verbose_name='border radius')),
                ('thumb_selected_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in selected state.', max_length=18, verbose_name='selected border color')),
                ('thumb_selected_border_width', models.PositiveSmallIntegerField(default=1, help_text='Thumbnail border width in selected state.', verbose_name='selected border width')),
                ('thumb_show_loader', models.BooleanField(default=True, help_text='Show thumb loader while loading the thumb.', verbose_name='show loader')),
                ('thumb_transition_duration', models.PositiveSmallIntegerField(default=200, help_text='Thumbnail effect transition duration.', verbose_name='transition duration')),
                ('thumb_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutQuad', help_text='Thumb effect transition easing.', max_length=17, verbose_name='transition easing')),
                ('thumb_width', models.PositiveSmallIntegerField(default=88, verbose_name='width')),
                ('gridpanel_arrows_align_hor', models.CharField(choices=[('borders', 'Borders'), ('center', 'Center'), ('grid', 'Grid')], default='center', help_text='Horizontal alignment of arrows, to the left and right borders, to the grid, or in the center space.', max_length=7, verbose_name='arrows horizontal alignment')),
                ('gridpanel_arrows_align_vert', models.CharField(choices=[('borders', 'Borders'), ('middle', 'Middle'), ('grid', 'Grid')], default='middle', help_text='Vertical alignment of arrows, to the left and right borders, to the grid, or in the center space.', max_length=7, verbose_name='arrows vertical alignment')),
                ('gridpanel_arrows_always_on', models.BooleanField(default=False, help_text='Always show arrows even if the grid is one pane only.', verbose_name='arrows always on')),
                ('gridpanel_arrows_padding_hor', models.PositiveSmallIntegerField(default=10, help_text='In case of horizontal type only, minimal size from the grid in case of "borders" and size from the grid in case of "grid".', verbose_name='horizontal arrows padding')),
                ('gridpanel_arrows_padding_vert', models.PositiveSmallIntegerField(default=4, help_text='Padding between the arrows and the grid, in case of "middle" align, there will be minimal padding.', verbose_name='vertical arrows padding')),
                ('gridpanel_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('gridpanel_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='Background color of the grid wrapper, if not set, it will be taken from the CSS.', max_length=18, verbose_name='background color')),
                ('gridpanel_enable_handle', models.BooleanField(default=True, verbose_name='enable handle')),
                ('gridpanel_grid_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='middle', max_length=6, verbose_name='grid panel alignment')),
                ('gridpanel_handle_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='top', help_text='Close handle tip align on the handle bar according panel orientation.', max_length=6, verbose_name='handle alignment')),
                ('gridpanel_handle_offset', models.PositiveSmallIntegerField(default=0, help_text='Offset of handle bar according the vertical align.', verbose_name='handle offset')),
                ('gridpanel_handle_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the handle, if blank inherit from gallery skin.', max_length=255, verbose_name='handle')),
                ('gridpanel_padding_border_bottom', models.PositiveSmallIntegerField(default=4, help_text='Padding between the bottom border of the panel.', verbose_name='bottom padding')),
                ('gridpanel_padding_border_left', models.PositiveSmallIntegerField(default=10, help_text='Padding between the left border of the panel.', verbose_name='left padding')),
                ('gridpanel_padding_border_right', models.PositiveSmallIntegerField(default=10, help_text='Padding between the left border of the panel.', verbose_name='right padding')),
                ('gridpanel_padding_border_top', models.PositiveSmallIntegerField(default=4, help_text='Padding between the top border of the panel.', verbose_name='top padding')),
                ('gridpanel_space_between_arrows', models.PositiveSmallIntegerField(default=20, help_text='On horizontal grids only.', verbose_name='space between arrows')),
                ('gridpanel_vertical_scroll', models.BooleanField(choices=[(True, 'Vertical'), (False, 'Horizontal')], default=True, help_text='Vertical or horizontal grid scroll and arrows.', verbose_name='scroll direction')),
                ('grid_carousel', models.BooleanField(default=False, help_text='Next pane goes to first when on last.', verbose_name='carousel')),
                ('grid_num_cols', models.PositiveSmallIntegerField(default=2, help_text='Number of grid columns.', verbose_name='columns')),
                ('grid_panes_direction', models.CharField(choices=[('left', 'Left'), ('bottom', 'Bottom')], default='left', help_text='Where panes will move', max_length=6, verbose_name='panes direction')),
                ('grid_space_between_cols', models.PositiveSmallIntegerField(default=10, verbose_name='space between columns')),
                ('grid_space_between_rows', models.PositiveSmallIntegerField(default=10, verbose_name='space between rows')),
                ('grid_transition_duration', models.PositiveSmallIntegerField(default=300, help_text='Transition of the panes change duration.', verbose_name='transition duration (ms)')),
                ('grid_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Easing function for the pane change transition.', max_length=17, verbose_name='transition easing')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gridtheme_unite_plugins_full', related_query_name='gridtheme_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Grid theme plugin',
                'verbose_name_plural': 'Grid theme plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='GridThemeSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme_hide_panel_under_width', models.PositiveSmallIntegerField(blank=True, default=480, help_text="Hide panel under certain browser width, if null, don't hide.", null=True, verbose_name='hide panel under width')),
                ('theme_panel_position', models.CharField(choices=[('top', 'Top'), ('bottom', 'Bottom'), ('left', 'Left'), ('right', 'Right')], default='right', help_text='Thumbs panel position.', max_length=6, verbose_name='panel position')),
                ('slider_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('slider_arrow_left_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Left arrow horizonal alignment.', max_length=6, verbose_name='left arrow alignment')),
                ('slider_arrow_left_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='left arrow vertical alignment')),
                ('slider_arrow_left_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='left arrow horizontal offset')),
                ('slider_arrow_left_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='left arrow vertical offset')),
                ('slider_arrow_right_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Right arrow horizonal alignment.', max_length=6, verbose_name='Right arrow alignment')),
                ('slider_arrow_right_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='light arrow vertical alignment')),
                ('slider_arrow_right_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='right arrow horizontal offset')),
                ('slider_arrow_right_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='right arrow vertical offset')),
                ('slider_bullets_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Bullets horizontal alignment.', max_length=6, verbose_name='bullets alignment')),
                ('slider_bullets_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='bottom', max_length=6, verbose_name='bullets vertical alignment')),
                ('slider_bullets_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='bullets horizontal offset')),
                ('slider_bullets_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='bullets vertical offset')),
                ('slider_bullets_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the bullets, if blank inherit from gallery skin.', max_length=255, verbose_name='bullets skin')),
                ('slider_bullets_space_between', models.SmallIntegerField(blank=True, default=None, help_text='Set the space between bullets. If blank then will be set default space from the skins.', null=True, verbose_name='space between bullets')),
                ('slider_controls_always_on', models.BooleanField(default=True, help_text='Controls are always on, false - show only on mouseover.', verbose_name='controls always on')),
                ('slider_controls_appear_duration', models.PositiveSmallIntegerField(default=300, help_text='The duration of appearing controls.', verbose_name='controls appear duration')),
                ('slider_controls_appear_ontap', models.BooleanField(default=True, help_text='Appear controls on tap event on touch devices.', verbose_name='controls appear on tap')),
                ('slider_control_swipe', models.BooleanField(default=True, verbose_name='enable swiping control')),
                ('slider_control_zoom', models.BooleanField(default=True, verbose_name='enable zooming control')),
                ('slider_enable_arrows', models.BooleanField(default=True, verbose_name='enable arrows')),
                ('slider_enable_bullets', models.BooleanField(default=False, verbose_name='enable bullets')),
                ('slider_enable_fullscreen_button', models.BooleanField(default=True, verbose_name='enable fullscreen button')),
                ('slider_enable_play_button', models.BooleanField(default=True, verbose_name='enable play button')),
                ('slider_enable_progress_indicator', models.BooleanField(default=True, verbose_name='enable progress indicator')),
                ('slider_enable_text_panel', models.BooleanField(default=False, verbose_name='enable text panel')),
                ('slider_enable_zoom_panel', models.BooleanField(default=True, help_text='Enable the zoom buttons, works together with zoom control.', verbose_name='enable zoom panel')),
                ('slider_fullscreen_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Fullscreen button horizonatal alignment.', max_length=6, verbose_name='fullscreen button alignment')),
                ('slider_fullscreen_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='fullscreen button vertical alignment')),
                ('slider_fullscreen_button_offset_hor', models.PositiveSmallIntegerField(default=11, verbose_name='fullscreen button horizontal offset')),
                ('slider_fullscreen_button_offset_vert', models.PositiveSmallIntegerField(default=9, verbose_name='fullscreen button vertical offset')),
                ('slider_fullscreen_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider fullscreen button, if empty inherit from gallery skin.', max_length=255, verbose_name='fullscreen button skin')),
                ('slider_item_padding_bottom', models.PositiveSmallIntegerField(default=0, verbose_name='slider item bottom padding')),
                ('slider_item_padding_left', models.PositiveSmallIntegerField(default=0, verbose_name='slider item left padding')),
                ('slider_item_padding_right', models.PositiveSmallIntegerField(default=0, verbose_name='slider item right padding')),
                ('slider_item_padding_top', models.PositiveSmallIntegerField(default=0, verbose_name='slider item top padding')),
                ('slider_loader_color', models.CharField(choices=[('white', 'White'), ('black', 'Black')], default='white', max_length=6, verbose_name='loader color')),
                ('slider_loader_type', models.PositiveSmallIntegerField(choices=[(1, 'Shape 1'), (2, 'Shape 2'), (3, 'Shape 3'), (4, 'Shape 4'), (5, 'Shape 5'), (6, 'Shape 6'), (7, 'Shape 7')], default=1, verbose_name='shape of the loader')),
                ('slider_play_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Play button horizonatal alignment.', max_length=6, verbose_name='play button alignment')),
                ('slider_play_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='play button vertical alignment')),
                ('slider_play_button_offset_hor', models.PositiveSmallIntegerField(default=40, verbose_name='play button horizontal offset')),
                ('slider_play_button_offset_vert', models.PositiveSmallIntegerField(default=8, verbose_name='play button vertical offset')),
                ('slider_play_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider play button, if empty inherit from gallery skin.', max_length=255, verbose_name='play button skin')),
                ('slider_progressbar_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='progress bar color')),
                ('slider_progressbar_line_width', models.PositiveSmallIntegerField(default=5, verbose_name='progress bar line width')),
                ('slider_progressbar_opacity', models.PositiveSmallIntegerField(default=60, help_text='The opacity of the progress bar.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='progress bar opacity (%)')),
                ('slider_progresspie_color1', colorfield.fields.ColorField(default='#B5B5B5', max_length=18, verbose_name='progress pie first color')),
                ('slider_progresspie_color2', colorfield.fields.ColorField(default='#E5E5E5', max_length=18, verbose_name='progress pie second color')),
                ('slider_progresspie_height', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie height')),
                ('slider_progresspie_stroke_width', models.PositiveSmallIntegerField(default=6, verbose_name='progress pie stroke width')),
                ('slider_progresspie_type_fill', models.BooleanField(choices=[(False, 'Stroke'), (True, 'Fill')], default=False, verbose_name='progress pie type')),
                ('slider_progresspie_width', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie width')),
                ('slider_progress_indicator_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Progress indicator horizonatal alignment.', max_length=6, verbose_name='progress indicator alignment')),
                ('slider_progress_indicator_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='progress indicator vertical alignment')),
                ('slider_progress_indicator_offset_hor', models.PositiveSmallIntegerField(default=16, verbose_name='progress indicator horizontal offset ')),
                ('slider_progress_indicator_offset_vert', models.PositiveSmallIntegerField(default=36, verbose_name='progress indicator vertical offset ')),
                ('slider_progress_indicator_type', models.CharField(choices=[('pie', 'Pie'), ('pie2', 'Pie 2'), ('bar', 'Bar')], default='pie', help_text='if pie not supported, it will switch to bar automatically.', max_length=4, verbose_name='progress indicator type')),
                ('slider_scale_mode', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode')),
                ('slider_scale_mode_fullscreen', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='down', max_length=4, verbose_name='fullscreen scale mode')),
                ('slider_scale_mode_media', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode on media items')),
                ('slider_textpanel_always_on', models.BooleanField(default=True, help_text='Text panel are always on or show only on mouseover.', verbose_name='text panel always on')),
                ('slider_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='text panel background color')),
                ('slider_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, verbose_name='text panel background CSS')),
                ('slider_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='text panel background opacity (%)')),
                ('slider_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='text panel description CSS')),
                ('slider_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='text panel title CSS')),
                ('slider_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('slider_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel description text color')),
                ('slider_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('slider_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('slider_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_textpanel_enable_bg', models.BooleanField(default=True, help_text='Enable the textpanel background.', verbose_name='enable background')),
                ('slider_textpanel_enable_description', models.BooleanField(default=True, help_text='Enable the description text.', verbose_name='enable description')),
                ('slider_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('slider_textpanel_fade_duration', models.PositiveSmallIntegerField(default=200, verbose_name='text panel fade duration ')),
                ('slider_textpanel_height', models.PositiveSmallIntegerField(blank=True, default=None, help_text='If blank it will be set dynamically.', null=True, verbose_name='text panel height ')),
                ('slider_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=10, verbose_name='text panel bottom padding')),
                ('slider_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, verbose_name='text panel left padding')),
                ('slider_textpanel_padding_right', models.PositiveSmallIntegerField(default=10, verbose_name='text panel right padding')),
                ('slider_textpanel_padding_title_description', models.PositiveSmallIntegerField(default=5, help_text='the space between the title and the description.', verbose_name='text panel title padding')),
                ('slider_textpanel_padding_top', models.PositiveSmallIntegerField(default=10, verbose_name='text panel top padding')),
                ('slider_textpanel_text_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='text panel vertical alignment')),
                ('slider_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold title')),
                ('slider_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel title text color')),
                ('slider_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('slider_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='title font size (px)')),
                ('slider_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_transition', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='The transition of the slide change.', max_length=5, verbose_name='transition')),
                ('slider_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Transition easing function of slide change.', max_length=17, verbose_name='transition easing')),
                ('slider_transition_speed', models.PositiveSmallIntegerField(default=300, help_text='Transition duration of slide change.', verbose_name='transition speed')),
                ('slider_videoplay_button_type', models.CharField(choices=[('square', 'Square'), ('round', 'Round')], default='square', max_length=6, verbose_name='videoplay button type')),
                ('slider_zoompanel_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Zoom panel horizonatal alignment.', max_length=6, verbose_name='zoom panel alignment')),
                ('slider_zoompanel_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='zoom panel vertical alignment')),
                ('slider_zoompanel_offset_hor', models.PositiveSmallIntegerField(default=12, verbose_name='zoom panel horizontal offset')),
                ('slider_zoompanel_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='zoom panel vertical offset')),
                ('slider_zoompanel_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider zoom panel, if empty inherit from gallery skin.', max_length=255, verbose_name='zoom panel skin')),
                ('slider_zoom_max_ratio', models.PositiveSmallIntegerField(default=6, verbose_name='maximum zoom ratio')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=400, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_skin', models.CharField(choices=[('default', 'Default'), ('alexis', 'Alexis')], max_length=255, verbose_name='gallery skin')),
                ('gallery_width', models.PositiveSmallIntegerField(default=900, help_text='Gallery width.', verbose_name='width')),
                ('gallery_autoplay', models.BooleanField(default=False, help_text='Begin slideshow autoplay on start.', verbose_name='gallery autoplay')),
                ('gallery_carousel', models.BooleanField(default=True, help_text='Next button on last image goes to first image.', verbose_name='carousel')),
                ('gallery_control_keyboard', models.BooleanField(default=True, help_text='Enable / disable keyboard controls.', verbose_name='keyboard')),
                ('gallery_control_thumbs_mousewheel', models.BooleanField(default=False, help_text='Enable / disable the mousewheel.', verbose_name='mousewheel')),
                ('gallery_debug_errors', models.BooleanField(default=True, help_text='show error message when there is some error on the gallery area.', verbose_name='debug errors')),
                ('gallery_height', models.PositiveSmallIntegerField(default=500, help_text='Gallery height.', verbose_name='height')),
                ('gallery_images_preload_type', models.CharField(choices=[('all', 'load all the images first time'), ('minimal', 'only image nabours will be loaded each time'), ('visible', 'visible thumbs images will be loaded each time')], default='minimal', help_text='Preload type of the images.', max_length=8, verbose_name='preload type')),
                ('gallery_min_height', models.PositiveSmallIntegerField(default=300, help_text='Gallery minimal height when resizing.', verbose_name='minimum height')),
                ('gallery_pause_on_mouseover', models.BooleanField(default=False, help_text='Pause on mouseover when playing slideshow.', verbose_name='pause on mouseover')),
                ('gallery_play_interval', models.PositiveSmallIntegerField(default=3000, help_text='Play interval of the slideshow.', verbose_name='play interval')),
                ('gallery_preserve_ratio', models.BooleanField(default=True, help_text='Preserve aspect ratio on window resize.', verbose_name='carousel')),
                ('thumb_border_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='border color')),
                ('thumb_border_effect', models.BooleanField(default=True, help_text='Specify if the thumb has border.', verbose_name='border effect')),
                ('thumb_border_width', models.PositiveSmallIntegerField(default=0, verbose_name='border width')),
                ('thumb_color_overlay_effect', models.BooleanField(default=True, help_text='Thumbnail color overlay effect, release the overlay on mouseover and selected states.', verbose_name='color overlay effect')),
                ('thumb_fixed_size', models.BooleanField(choices=[(True, 'Fixed'), (False, 'Dynamic')], default=True, help_text='Fixed/dynamic thumbnail width.', verbose_name='sizing method')),
                ('thumb_height', models.PositiveSmallIntegerField(default=50, verbose_name='height')),
                ('thumb_image_overlay_effect', models.BooleanField(default=False, help_text='Images overlay effect on normal state only.', verbose_name='image overlay effect')),
                ('thumb_image_overlay_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image overlay type')),
                ('thumb_loader_type', models.CharField(choices=[('dark', 'Dark'), ('light', 'Light')], default='dark', max_length=8, verbose_name='loader type')),
                ('thumb_overlay_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='overlay color')),
                ('thumb_overlay_opacity', models.PositiveSmallIntegerField(default=40, help_text='Thumbnail overlay color opacity.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('thumb_overlay_reverse', models.BooleanField(default=False, help_text='Reverse the overlay, will be shown on selected state only.', verbose_name='overlay reverse')),
                ('thumb_over_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in mouseover state.', max_length=18, verbose_name='mouseover border color')),
                ('thumb_over_border_width', models.PositiveSmallIntegerField(default=0, help_text='Thumbnail border width in mouseover state.', verbose_name='mouseover border width')),
                ('thumb_round_corners_radius', models.PositiveSmallIntegerField(default=0, verbose_name='border radius')),
                ('thumb_selected_border_color', colorfield.fields.ColorField(default='#D9D9D9', help_text='Thumbnail border color in selected state.', max_length=18, verbose_name='selected border color')),
                ('thumb_selected_border_width', models.PositiveSmallIntegerField(default=1, help_text='Thumbnail border width in selected state.', verbose_name='selected border width')),
                ('thumb_show_loader', models.BooleanField(default=True, help_text='Show thumb loader while loading the thumb.', verbose_name='show loader')),
                ('thumb_transition_duration', models.PositiveSmallIntegerField(default=200, help_text='Thumbnail effect transition duration.', verbose_name='transition duration')),
                ('thumb_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeOutQuad', help_text='Thumb effect transition easing.', max_length=17, verbose_name='transition easing')),
                ('thumb_width', models.PositiveSmallIntegerField(default=88, verbose_name='width')),
                ('gridpanel_arrows_align_hor', models.CharField(choices=[('borders', 'Borders'), ('center', 'Center'), ('grid', 'Grid')], default='center', help_text='Horizontal alignment of arrows, to the left and right borders, to the grid, or in the center space.', max_length=7, verbose_name='arrows horizontal alignment')),
                ('gridpanel_arrows_align_vert', models.CharField(choices=[('borders', 'Borders'), ('middle', 'Middle'), ('grid', 'Grid')], default='middle', help_text='Vertical alignment of arrows, to the left and right borders, to the grid, or in the center space.', max_length=7, verbose_name='arrows vertical alignment')),
                ('gridpanel_arrows_always_on', models.BooleanField(default=False, help_text='Always show arrows even if the grid is one pane only.', verbose_name='arrows always on')),
                ('gridpanel_arrows_padding_hor', models.PositiveSmallIntegerField(default=10, help_text='In case of horizontal type only, minimal size from the grid in case of "borders" and size from the grid in case of "grid".', verbose_name='horizontal arrows padding')),
                ('gridpanel_arrows_padding_vert', models.PositiveSmallIntegerField(default=4, help_text='Padding between the arrows and the grid, in case of "middle" align, there will be minimal padding.', verbose_name='vertical arrows padding')),
                ('gridpanel_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('gridpanel_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='Background color of the grid wrapper, if not set, it will be taken from the CSS.', max_length=18, verbose_name='background color')),
                ('gridpanel_enable_handle', models.BooleanField(default=True, verbose_name='enable handle')),
                ('gridpanel_grid_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='middle', max_length=6, verbose_name='grid panel alignment')),
                ('gridpanel_handle_align', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom'), ('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='top', help_text='Close handle tip align on the handle bar according panel orientation.', max_length=6, verbose_name='handle alignment')),
                ('gridpanel_handle_offset', models.PositiveSmallIntegerField(default=0, help_text='Offset of handle bar according the vertical align.', verbose_name='handle offset')),
                ('gridpanel_handle_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the handle, if blank inherit from gallery skin.', max_length=255, verbose_name='handle')),
                ('gridpanel_padding_border_bottom', models.PositiveSmallIntegerField(default=4, help_text='Padding between the bottom border of the panel.', verbose_name='bottom padding')),
                ('gridpanel_padding_border_left', models.PositiveSmallIntegerField(default=10, help_text='Padding between the left border of the panel.', verbose_name='left padding')),
                ('gridpanel_padding_border_right', models.PositiveSmallIntegerField(default=10, help_text='Padding between the left border of the panel.', verbose_name='right padding')),
                ('gridpanel_padding_border_top', models.PositiveSmallIntegerField(default=4, help_text='Padding between the top border of the panel.', verbose_name='top padding')),
                ('gridpanel_space_between_arrows', models.PositiveSmallIntegerField(default=20, help_text='On horizontal grids only.', verbose_name='space between arrows')),
                ('gridpanel_vertical_scroll', models.BooleanField(choices=[(True, 'Vertical'), (False, 'Horizontal')], default=True, help_text='Vertical or horizontal grid scroll and arrows.', verbose_name='scroll direction')),
                ('grid_carousel', models.BooleanField(default=False, help_text='Next pane goes to first when on last.', verbose_name='carousel')),
                ('grid_num_cols', models.PositiveSmallIntegerField(default=2, help_text='Number of grid columns.', verbose_name='columns')),
                ('grid_panes_direction', models.CharField(choices=[('left', 'Left'), ('bottom', 'Bottom')], default='left', help_text='Where panes will move', max_length=6, verbose_name='panes direction')),
                ('grid_space_between_cols', models.PositiveSmallIntegerField(default=10, verbose_name='space between columns')),
                ('grid_space_between_rows', models.PositiveSmallIntegerField(default=10, verbose_name='space between rows')),
                ('grid_transition_duration', models.PositiveSmallIntegerField(default=300, help_text='Transition of the panes change duration.', verbose_name='transition duration (ms)')),
                ('grid_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Easing function for the pane change transition.', max_length=17, verbose_name='transition easing')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Grid theme unite options',
                'verbose_name_plural': 'Grid theme unite options',
            },
        ),
        migrations.CreateModel(
            name='SliderPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_sliderplugin', serialize=False, to='cms.CMSPlugin')),
                ('slider_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('slider_arrow_left_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Left arrow horizonal alignment.', max_length=6, verbose_name='left arrow alignment')),
                ('slider_arrow_left_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='left arrow vertical alignment')),
                ('slider_arrow_left_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='left arrow horizontal offset')),
                ('slider_arrow_left_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='left arrow vertical offset')),
                ('slider_arrow_right_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Right arrow horizonal alignment.', max_length=6, verbose_name='Right arrow alignment')),
                ('slider_arrow_right_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='light arrow vertical alignment')),
                ('slider_arrow_right_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='right arrow horizontal offset')),
                ('slider_arrow_right_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='right arrow vertical offset')),
                ('slider_bullets_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Bullets horizontal alignment.', max_length=6, verbose_name='bullets alignment')),
                ('slider_bullets_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='bottom', max_length=6, verbose_name='bullets vertical alignment')),
                ('slider_bullets_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='bullets horizontal offset')),
                ('slider_bullets_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='bullets vertical offset')),
                ('slider_bullets_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the bullets, if blank inherit from gallery skin.', max_length=255, verbose_name='bullets skin')),
                ('slider_bullets_space_between', models.SmallIntegerField(blank=True, default=None, help_text='Set the space between bullets. If blank then will be set default space from the skins.', null=True, verbose_name='space between bullets')),
                ('slider_controls_always_on', models.BooleanField(default=True, help_text='Controls are always on, false - show only on mouseover.', verbose_name='controls always on')),
                ('slider_controls_appear_duration', models.PositiveSmallIntegerField(default=300, help_text='The duration of appearing controls.', verbose_name='controls appear duration')),
                ('slider_controls_appear_ontap', models.BooleanField(default=True, help_text='Appear controls on tap event on touch devices.', verbose_name='controls appear on tap')),
                ('slider_control_swipe', models.BooleanField(default=True, verbose_name='enable swiping control')),
                ('slider_control_zoom', models.BooleanField(default=True, verbose_name='enable zooming control')),
                ('slider_enable_arrows', models.BooleanField(default=True, verbose_name='enable arrows')),
                ('slider_enable_bullets', models.BooleanField(default=False, verbose_name='enable bullets')),
                ('slider_enable_fullscreen_button', models.BooleanField(default=True, verbose_name='enable fullscreen button')),
                ('slider_enable_play_button', models.BooleanField(default=True, verbose_name='enable play button')),
                ('slider_enable_progress_indicator', models.BooleanField(default=True, verbose_name='enable progress indicator')),
                ('slider_enable_text_panel', models.BooleanField(default=False, verbose_name='enable text panel')),
                ('slider_enable_zoom_panel', models.BooleanField(default=True, help_text='Enable the zoom buttons, works together with zoom control.', verbose_name='enable zoom panel')),
                ('slider_fullscreen_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Fullscreen button horizonatal alignment.', max_length=6, verbose_name='fullscreen button alignment')),
                ('slider_fullscreen_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='fullscreen button vertical alignment')),
                ('slider_fullscreen_button_offset_hor', models.PositiveSmallIntegerField(default=11, verbose_name='fullscreen button horizontal offset')),
                ('slider_fullscreen_button_offset_vert', models.PositiveSmallIntegerField(default=9, verbose_name='fullscreen button vertical offset')),
                ('slider_fullscreen_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider fullscreen button, if empty inherit from gallery skin.', max_length=255, verbose_name='fullscreen button skin')),
                ('slider_item_padding_bottom', models.PositiveSmallIntegerField(default=0, verbose_name='slider item bottom padding')),
                ('slider_item_padding_left', models.PositiveSmallIntegerField(default=0, verbose_name='slider item left padding')),
                ('slider_item_padding_right', models.PositiveSmallIntegerField(default=0, verbose_name='slider item right padding')),
                ('slider_item_padding_top', models.PositiveSmallIntegerField(default=0, verbose_name='slider item top padding')),
                ('slider_loader_color', models.CharField(choices=[('white', 'White'), ('black', 'Black')], default='white', max_length=6, verbose_name='loader color')),
                ('slider_loader_type', models.PositiveSmallIntegerField(choices=[(1, 'Shape 1'), (2, 'Shape 2'), (3, 'Shape 3'), (4, 'Shape 4'), (5, 'Shape 5'), (6, 'Shape 6'), (7, 'Shape 7')], default=1, verbose_name='shape of the loader')),
                ('slider_play_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Play button horizonatal alignment.', max_length=6, verbose_name='play button alignment')),
                ('slider_play_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='play button vertical alignment')),
                ('slider_play_button_offset_hor', models.PositiveSmallIntegerField(default=40, verbose_name='play button horizontal offset')),
                ('slider_play_button_offset_vert', models.PositiveSmallIntegerField(default=8, verbose_name='play button vertical offset')),
                ('slider_play_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider play button, if empty inherit from gallery skin.', max_length=255, verbose_name='play button skin')),
                ('slider_progressbar_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='progress bar color')),
                ('slider_progressbar_line_width', models.PositiveSmallIntegerField(default=5, verbose_name='progress bar line width')),
                ('slider_progressbar_opacity', models.PositiveSmallIntegerField(default=60, help_text='The opacity of the progress bar.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='progress bar opacity (%)')),
                ('slider_progresspie_color1', colorfield.fields.ColorField(default='#B5B5B5', max_length=18, verbose_name='progress pie first color')),
                ('slider_progresspie_color2', colorfield.fields.ColorField(default='#E5E5E5', max_length=18, verbose_name='progress pie second color')),
                ('slider_progresspie_height', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie height')),
                ('slider_progresspie_stroke_width', models.PositiveSmallIntegerField(default=6, verbose_name='progress pie stroke width')),
                ('slider_progresspie_type_fill', models.BooleanField(choices=[(False, 'Stroke'), (True, 'Fill')], default=False, verbose_name='progress pie type')),
                ('slider_progresspie_width', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie width')),
                ('slider_progress_indicator_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Progress indicator horizonatal alignment.', max_length=6, verbose_name='progress indicator alignment')),
                ('slider_progress_indicator_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='progress indicator vertical alignment')),
                ('slider_progress_indicator_offset_hor', models.PositiveSmallIntegerField(default=16, verbose_name='progress indicator horizontal offset ')),
                ('slider_progress_indicator_offset_vert', models.PositiveSmallIntegerField(default=36, verbose_name='progress indicator vertical offset ')),
                ('slider_progress_indicator_type', models.CharField(choices=[('pie', 'Pie'), ('pie2', 'Pie 2'), ('bar', 'Bar')], default='pie', help_text='if pie not supported, it will switch to bar automatically.', max_length=4, verbose_name='progress indicator type')),
                ('slider_scale_mode', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode')),
                ('slider_scale_mode_fullscreen', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='down', max_length=4, verbose_name='fullscreen scale mode')),
                ('slider_scale_mode_media', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode on media items')),
                ('slider_textpanel_always_on', models.BooleanField(default=True, help_text='Text panel are always on or show only on mouseover.', verbose_name='text panel always on')),
                ('slider_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='text panel background color')),
                ('slider_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, verbose_name='text panel background CSS')),
                ('slider_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='text panel background opacity (%)')),
                ('slider_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='text panel description CSS')),
                ('slider_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='text panel title CSS')),
                ('slider_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('slider_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel description text color')),
                ('slider_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('slider_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('slider_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_textpanel_enable_bg', models.BooleanField(default=True, help_text='Enable the textpanel background.', verbose_name='enable background')),
                ('slider_textpanel_enable_description', models.BooleanField(default=True, help_text='Enable the description text.', verbose_name='enable description')),
                ('slider_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('slider_textpanel_fade_duration', models.PositiveSmallIntegerField(default=200, verbose_name='text panel fade duration ')),
                ('slider_textpanel_height', models.PositiveSmallIntegerField(blank=True, default=None, help_text='If blank it will be set dynamically.', null=True, verbose_name='text panel height ')),
                ('slider_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=10, verbose_name='text panel bottom padding')),
                ('slider_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, verbose_name='text panel left padding')),
                ('slider_textpanel_padding_right', models.PositiveSmallIntegerField(default=10, verbose_name='text panel right padding')),
                ('slider_textpanel_padding_title_description', models.PositiveSmallIntegerField(default=5, help_text='the space between the title and the description.', verbose_name='text panel title padding')),
                ('slider_textpanel_padding_top', models.PositiveSmallIntegerField(default=10, verbose_name='text panel top padding')),
                ('slider_textpanel_text_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='text panel vertical alignment')),
                ('slider_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold title')),
                ('slider_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel title text color')),
                ('slider_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('slider_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='title font size (px)')),
                ('slider_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_transition', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='The transition of the slide change.', max_length=5, verbose_name='transition')),
                ('slider_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Transition easing function of slide change.', max_length=17, verbose_name='transition easing')),
                ('slider_transition_speed', models.PositiveSmallIntegerField(default=300, help_text='Transition duration of slide change.', verbose_name='transition speed')),
                ('slider_videoplay_button_type', models.CharField(choices=[('square', 'Square'), ('round', 'Round')], default='square', max_length=6, verbose_name='videoplay button type')),
                ('slider_zoompanel_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Zoom panel horizonatal alignment.', max_length=6, verbose_name='zoom panel alignment')),
                ('slider_zoompanel_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='zoom panel vertical alignment')),
                ('slider_zoompanel_offset_hor', models.PositiveSmallIntegerField(default=12, verbose_name='zoom panel horizontal offset')),
                ('slider_zoompanel_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='zoom panel vertical offset')),
                ('slider_zoompanel_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider zoom panel, if empty inherit from gallery skin.', max_length=255, verbose_name='zoom panel skin')),
                ('slider_zoom_max_ratio', models.PositiveSmallIntegerField(default=6, verbose_name='maximum zoom ratio')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=400, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_skin', models.CharField(choices=[('default', 'Default'), ('alexis', 'Alexis')], max_length=255, verbose_name='gallery skin')),
                ('gallery_width', models.PositiveSmallIntegerField(default=900, help_text='Gallery width.', verbose_name='width')),
                ('gallery_autoplay', models.BooleanField(default=False, help_text='Begin slideshow autoplay on start.', verbose_name='gallery autoplay')),
                ('gallery_carousel', models.BooleanField(default=True, help_text='Next button on last image goes to first image.', verbose_name='carousel')),
                ('gallery_control_keyboard', models.BooleanField(default=True, help_text='Enable / disable keyboard controls.', verbose_name='keyboard')),
                ('gallery_control_thumbs_mousewheel', models.BooleanField(default=False, help_text='Enable / disable the mousewheel.', verbose_name='mousewheel')),
                ('gallery_debug_errors', models.BooleanField(default=True, help_text='show error message when there is some error on the gallery area.', verbose_name='debug errors')),
                ('gallery_height', models.PositiveSmallIntegerField(default=500, help_text='Gallery height.', verbose_name='height')),
                ('gallery_images_preload_type', models.CharField(choices=[('all', 'load all the images first time'), ('minimal', 'only image nabours will be loaded each time'), ('visible', 'visible thumbs images will be loaded each time')], default='minimal', help_text='Preload type of the images.', max_length=8, verbose_name='preload type')),
                ('gallery_min_height', models.PositiveSmallIntegerField(default=300, help_text='Gallery minimal height when resizing.', verbose_name='minimum height')),
                ('gallery_pause_on_mouseover', models.BooleanField(default=False, help_text='Pause on mouseover when playing slideshow.', verbose_name='pause on mouseover')),
                ('gallery_play_interval', models.PositiveSmallIntegerField(default=3000, help_text='Play interval of the slideshow.', verbose_name='play interval')),
                ('gallery_preserve_ratio', models.BooleanField(default=True, help_text='Preserve aspect ratio on window resize.', verbose_name='carousel')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slider_unite_plugins_full', related_query_name='slider_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Slider plugin',
                'verbose_name_plural': 'Slider plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='SliderSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slider_arrows_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider arrows, if blank inherit from gallery skin.', max_length=255, verbose_name='arrows skin')),
                ('slider_arrow_left_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Left arrow horizonal alignment.', max_length=6, verbose_name='left arrow alignment')),
                ('slider_arrow_left_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='left arrow vertical alignment')),
                ('slider_arrow_left_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='left arrow horizontal offset')),
                ('slider_arrow_left_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='left arrow vertical offset')),
                ('slider_arrow_right_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Right arrow horizonal alignment.', max_length=6, verbose_name='Right arrow alignment')),
                ('slider_arrow_right_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='light arrow vertical alignment')),
                ('slider_arrow_right_offset_hor', models.PositiveSmallIntegerField(default=20, verbose_name='right arrow horizontal offset')),
                ('slider_arrow_right_offset_vert', models.PositiveSmallIntegerField(default=0, verbose_name='right arrow vertical offset')),
                ('slider_bullets_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Bullets horizontal alignment.', max_length=6, verbose_name='bullets alignment')),
                ('slider_bullets_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='bottom', max_length=6, verbose_name='bullets vertical alignment')),
                ('slider_bullets_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='bullets horizontal offset')),
                ('slider_bullets_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='bullets vertical offset')),
                ('slider_bullets_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the bullets, if blank inherit from gallery skin.', max_length=255, verbose_name='bullets skin')),
                ('slider_bullets_space_between', models.SmallIntegerField(blank=True, default=None, help_text='Set the space between bullets. If blank then will be set default space from the skins.', null=True, verbose_name='space between bullets')),
                ('slider_controls_always_on', models.BooleanField(default=True, help_text='Controls are always on, false - show only on mouseover.', verbose_name='controls always on')),
                ('slider_controls_appear_duration', models.PositiveSmallIntegerField(default=300, help_text='The duration of appearing controls.', verbose_name='controls appear duration')),
                ('slider_controls_appear_ontap', models.BooleanField(default=True, help_text='Appear controls on tap event on touch devices.', verbose_name='controls appear on tap')),
                ('slider_control_swipe', models.BooleanField(default=True, verbose_name='enable swiping control')),
                ('slider_control_zoom', models.BooleanField(default=True, verbose_name='enable zooming control')),
                ('slider_enable_arrows', models.BooleanField(default=True, verbose_name='enable arrows')),
                ('slider_enable_bullets', models.BooleanField(default=False, verbose_name='enable bullets')),
                ('slider_enable_fullscreen_button', models.BooleanField(default=True, verbose_name='enable fullscreen button')),
                ('slider_enable_play_button', models.BooleanField(default=True, verbose_name='enable play button')),
                ('slider_enable_progress_indicator', models.BooleanField(default=True, verbose_name='enable progress indicator')),
                ('slider_enable_text_panel', models.BooleanField(default=False, verbose_name='enable text panel')),
                ('slider_enable_zoom_panel', models.BooleanField(default=True, help_text='Enable the zoom buttons, works together with zoom control.', verbose_name='enable zoom panel')),
                ('slider_fullscreen_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Fullscreen button horizonatal alignment.', max_length=6, verbose_name='fullscreen button alignment')),
                ('slider_fullscreen_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='fullscreen button vertical alignment')),
                ('slider_fullscreen_button_offset_hor', models.PositiveSmallIntegerField(default=11, verbose_name='fullscreen button horizontal offset')),
                ('slider_fullscreen_button_offset_vert', models.PositiveSmallIntegerField(default=9, verbose_name='fullscreen button vertical offset')),
                ('slider_fullscreen_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider fullscreen button, if empty inherit from gallery skin.', max_length=255, verbose_name='fullscreen button skin')),
                ('slider_item_padding_bottom', models.PositiveSmallIntegerField(default=0, verbose_name='slider item bottom padding')),
                ('slider_item_padding_left', models.PositiveSmallIntegerField(default=0, verbose_name='slider item left padding')),
                ('slider_item_padding_right', models.PositiveSmallIntegerField(default=0, verbose_name='slider item right padding')),
                ('slider_item_padding_top', models.PositiveSmallIntegerField(default=0, verbose_name='slider item top padding')),
                ('slider_loader_color', models.CharField(choices=[('white', 'White'), ('black', 'Black')], default='white', max_length=6, verbose_name='loader color')),
                ('slider_loader_type', models.PositiveSmallIntegerField(choices=[(1, 'Shape 1'), (2, 'Shape 2'), (3, 'Shape 3'), (4, 'Shape 4'), (5, 'Shape 5'), (6, 'Shape 6'), (7, 'Shape 7')], default=1, verbose_name='shape of the loader')),
                ('slider_play_button_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Play button horizonatal alignment.', max_length=6, verbose_name='play button alignment')),
                ('slider_play_button_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='play button vertical alignment')),
                ('slider_play_button_offset_hor', models.PositiveSmallIntegerField(default=40, verbose_name='play button horizontal offset')),
                ('slider_play_button_offset_vert', models.PositiveSmallIntegerField(default=8, verbose_name='play button vertical offset')),
                ('slider_play_button_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider play button, if empty inherit from gallery skin.', max_length=255, verbose_name='play button skin')),
                ('slider_progressbar_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='progress bar color')),
                ('slider_progressbar_line_width', models.PositiveSmallIntegerField(default=5, verbose_name='progress bar line width')),
                ('slider_progressbar_opacity', models.PositiveSmallIntegerField(default=60, help_text='The opacity of the progress bar.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='progress bar opacity (%)')),
                ('slider_progresspie_color1', colorfield.fields.ColorField(default='#B5B5B5', max_length=18, verbose_name='progress pie first color')),
                ('slider_progresspie_color2', colorfield.fields.ColorField(default='#E5E5E5', max_length=18, verbose_name='progress pie second color')),
                ('slider_progresspie_height', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie height')),
                ('slider_progresspie_stroke_width', models.PositiveSmallIntegerField(default=6, verbose_name='progress pie stroke width')),
                ('slider_progresspie_type_fill', models.BooleanField(choices=[(False, 'Stroke'), (True, 'Fill')], default=False, verbose_name='progress pie type')),
                ('slider_progresspie_width', models.PositiveSmallIntegerField(default=30, verbose_name='progress pie width')),
                ('slider_progress_indicator_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', help_text='Progress indicator horizonatal alignment.', max_length=6, verbose_name='progress indicator alignment')),
                ('slider_progress_indicator_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='progress indicator vertical alignment')),
                ('slider_progress_indicator_offset_hor', models.PositiveSmallIntegerField(default=16, verbose_name='progress indicator horizontal offset ')),
                ('slider_progress_indicator_offset_vert', models.PositiveSmallIntegerField(default=36, verbose_name='progress indicator vertical offset ')),
                ('slider_progress_indicator_type', models.CharField(choices=[('pie', 'Pie'), ('pie2', 'Pie 2'), ('bar', 'Bar')], default='pie', help_text='if pie not supported, it will switch to bar automatically.', max_length=4, verbose_name='progress indicator type')),
                ('slider_scale_mode', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode')),
                ('slider_scale_mode_fullscreen', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='down', max_length=4, verbose_name='fullscreen scale mode')),
                ('slider_scale_mode_media', models.CharField(choices=[('fit', 'scale down and up the image to always fit the slider'), ('down', "scale down only, smaller images will be shown, don't enlarge images (scale up)"), ('fill', 'fill the entire slider space by scaling, cropping and centering the image'), ('fitvert', 'make the image always fill the vertical slider area')], default='fill', max_length=4, verbose_name='scale mode on media items')),
                ('slider_textpanel_always_on', models.BooleanField(default=True, help_text='Text panel are always on or show only on mouseover.', verbose_name='text panel always on')),
                ('slider_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='text panel background color')),
                ('slider_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, verbose_name='text panel background CSS')),
                ('slider_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='text panel background opacity (%)')),
                ('slider_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='text panel description CSS')),
                ('slider_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='text panel title CSS')),
                ('slider_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('slider_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel description text color')),
                ('slider_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('slider_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('slider_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_textpanel_enable_bg', models.BooleanField(default=True, help_text='Enable the textpanel background.', verbose_name='enable background')),
                ('slider_textpanel_enable_description', models.BooleanField(default=True, help_text='Enable the description text.', verbose_name='enable description')),
                ('slider_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('slider_textpanel_fade_duration', models.PositiveSmallIntegerField(default=200, verbose_name='text panel fade duration ')),
                ('slider_textpanel_height', models.PositiveSmallIntegerField(blank=True, default=None, help_text='If blank it will be set dynamically.', null=True, verbose_name='text panel height ')),
                ('slider_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=10, verbose_name='text panel bottom padding')),
                ('slider_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, verbose_name='text panel left padding')),
                ('slider_textpanel_padding_right', models.PositiveSmallIntegerField(default=10, verbose_name='text panel right padding')),
                ('slider_textpanel_padding_title_description', models.PositiveSmallIntegerField(default=5, help_text='the space between the title and the description.', verbose_name='text panel title padding')),
                ('slider_textpanel_padding_top', models.PositiveSmallIntegerField(default=10, verbose_name='text panel top padding')),
                ('slider_textpanel_text_valign', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='middle', max_length=6, verbose_name='text panel vertical alignment')),
                ('slider_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold title')),
                ('slider_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='text panel title text color')),
                ('slider_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('slider_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='title font size (px)')),
                ('slider_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('slider_transition', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='The transition of the slide change.', max_length=5, verbose_name='transition')),
                ('slider_transition_easing', models.CharField(choices=[('easeInOutBack', 'easeInOutBack'), ('easeInOutBounce', 'easeInOutBounce'), ('easeInOutCirc', 'easeInOutCirc'), ('easeInOutCubic', 'easeInOutCubic'), ('easeInOutElastic', 'easeInOutElastic'), ('easeInOutExpo', 'easeInOutExpo'), ('easeInOutQuad', 'easeInOutQuad'), ('easeInOutQuart', 'easeInOutQuart'), ('easeInOutQuint', 'easeInOutQuint'), ('easeInOutSine', 'easeInOutSine'), ('easeInBack', 'easeInBack'), ('easeInBounce', 'easeInBounce'), ('easeInCirc', 'easeInCirc'), ('easeInCubic', 'easeInCubic'), ('easeInElastic', 'easeInElastic'), ('easeInExpo', 'easeInExpo'), ('easeInQuad', 'easeInQuad'), ('easeInQuart', 'easeInQuart'), ('easeInQuint', 'easeInQuint'), ('easeInSine', 'easeInSine'), ('easeOutBack', 'easeOutBack'), ('easeOutBounce', 'easeOutBounce'), ('easeOutCirc', 'easeOutCirc'), ('easeOutCubic', 'easeOutCubic'), ('easeOutElastic', 'easeOutElastic'), ('easeOutExpo', 'easeOutExpo'), ('easeOutQuad', 'easeOutQuad'), ('easeOutQuart', 'easeOutQuart'), ('easeOutQuint', 'easeOutQuint'), ('easeOutSine', 'easeOutSine'), ('swing', 'swing')], default='easeInOutQuad', help_text='Transition easing function of slide change.', max_length=17, verbose_name='transition easing')),
                ('slider_transition_speed', models.PositiveSmallIntegerField(default=300, help_text='Transition duration of slide change.', verbose_name='transition speed')),
                ('slider_videoplay_button_type', models.CharField(choices=[('square', 'Square'), ('round', 'Round')], default='square', max_length=6, verbose_name='videoplay button type')),
                ('slider_zoompanel_align_hor', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='right', help_text='Zoom panel horizonatal alignment.', max_length=6, verbose_name='zoom panel alignment')),
                ('slider_zoompanel_align_vert', models.CharField(choices=[('top', 'Top'), ('middle', 'Middle'), ('bottom', 'Bottom')], default='top', max_length=6, verbose_name='zoom panel vertical alignment')),
                ('slider_zoompanel_offset_hor', models.PositiveSmallIntegerField(default=12, verbose_name='zoom panel horizontal offset')),
                ('slider_zoompanel_offset_vert', models.PositiveSmallIntegerField(default=10, verbose_name='zoom panel vertical offset')),
                ('slider_zoompanel_skin', models.CharField(blank=True, choices=[('default', 'Default'), ('alexis', 'Alexis')], default='', help_text='Skin of the slider zoom panel, if empty inherit from gallery skin.', max_length=255, verbose_name='zoom panel skin')),
                ('slider_zoom_max_ratio', models.PositiveSmallIntegerField(default=6, verbose_name='maximum zoom ratio')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=400, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_skin', models.CharField(choices=[('default', 'Default'), ('alexis', 'Alexis')], max_length=255, verbose_name='gallery skin')),
                ('gallery_width', models.PositiveSmallIntegerField(default=900, help_text='Gallery width.', verbose_name='width')),
                ('gallery_autoplay', models.BooleanField(default=False, help_text='Begin slideshow autoplay on start.', verbose_name='gallery autoplay')),
                ('gallery_carousel', models.BooleanField(default=True, help_text='Next button on last image goes to first image.', verbose_name='carousel')),
                ('gallery_control_keyboard', models.BooleanField(default=True, help_text='Enable / disable keyboard controls.', verbose_name='keyboard')),
                ('gallery_control_thumbs_mousewheel', models.BooleanField(default=False, help_text='Enable / disable the mousewheel.', verbose_name='mousewheel')),
                ('gallery_debug_errors', models.BooleanField(default=True, help_text='show error message when there is some error on the gallery area.', verbose_name='debug errors')),
                ('gallery_height', models.PositiveSmallIntegerField(default=500, help_text='Gallery height.', verbose_name='height')),
                ('gallery_images_preload_type', models.CharField(choices=[('all', 'load all the images first time'), ('minimal', 'only image nabours will be loaded each time'), ('visible', 'visible thumbs images will be loaded each time')], default='minimal', help_text='Preload type of the images.', max_length=8, verbose_name='preload type')),
                ('gallery_min_height', models.PositiveSmallIntegerField(default=300, help_text='Gallery minimal height when resizing.', verbose_name='minimum height')),
                ('gallery_pause_on_mouseover', models.BooleanField(default=False, help_text='Pause on mouseover when playing slideshow.', verbose_name='pause on mouseover')),
                ('gallery_play_interval', models.PositiveSmallIntegerField(default=3000, help_text='Play interval of the slideshow.', verbose_name='play interval')),
                ('gallery_preserve_ratio', models.BooleanField(default=True, help_text='Preserve aspect ratio on window resize.', verbose_name='carousel')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Slider unite options',
                'verbose_name_plural': 'Slider unite options',
            },
        ),
        migrations.CreateModel(
            name='TilesColumnsPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_tilescolumnsplugin', serialize=False, to='cms.CMSPlugin')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_auto_open', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Auto open lightbox at start. If some number gived, like 0.', null=True, verbose_name='auto open')),
                ('theme_enable_preloader', models.BooleanField(default=True, help_text='Enable preloader circle.', verbose_name='enable preloader')),
                ('theme_preloading_height', models.PositiveSmallIntegerField(default=200, help_text='The height of the preloading div, it is shown before the gallery.', verbose_name='preloading height')),
                ('theme_preloader_vertpos', models.PositiveSmallIntegerField(default=100, help_text='The vertical position of the preloader.', verbose_name='preloader vertical position')),
                ('theme_appearance_order', models.CharField(choices=[('normal', 'Normal'), ('shuffle', 'Shuffle'), ('keep', 'Keep order')], default='normal', help_text='The appearance order of the tiles.', max_length=8, verbose_name='appearance order')),
                ('tiles_enable_transition', models.BooleanField(default=True, help_text='enable transition on screen width change.', verbose_name='enable transition')),
                ('tiles_space_between_cols', models.PositiveSmallIntegerField(default=3, verbose_name='space between images')),
                ('tiles_space_between_cols_mobile', models.PositiveSmallIntegerField(default=3, help_text='Space between cols for mobile type.', verbose_name='space between images (mobile)')),
                ('tiles_min_columns', models.PositiveSmallIntegerField(default=2, help_text='Maximum number of columns, for mobile size.', verbose_name='min columns')),
                ('tiles_set_initial_height', models.BooleanField(default=True, help_text='Columns type related only.', verbose_name='set initial height')),
                ('tiles_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Alignment of the tiles in the space.', max_length=6, verbose_name='align')),
                ('tiles_col_width', models.PositiveSmallIntegerField(default=250, help_text='Column width. Exact or base according the settings.', verbose_name='column width')),
                ('tiles_exact_width', models.BooleanField(default=False, help_text='Exact width of column. Disables the min and max columns.', verbose_name='exact width')),
                ('tiles_include_padding', models.BooleanField(default=True, help_text='Include padding at the sides of the columns, equal to current space between cols.', verbose_name='include padding')),
                ('tiles_max_columns', models.PositiveSmallIntegerField(default=0, help_text='Maximum number of columns (0 for unlimited).', verbose_name='maximum columns')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=0, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=False, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=False, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tilescolumns_unite_plugins_full', related_query_name='tilescolumns_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Tiles - Columns plugin',
                'verbose_name_plural': 'Tiles - Columns plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='TilesColumnsSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_auto_open', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Auto open lightbox at start. If some number gived, like 0.', null=True, verbose_name='auto open')),
                ('theme_enable_preloader', models.BooleanField(default=True, help_text='Enable preloader circle.', verbose_name='enable preloader')),
                ('theme_preloading_height', models.PositiveSmallIntegerField(default=200, help_text='The height of the preloading div, it is shown before the gallery.', verbose_name='preloading height')),
                ('theme_preloader_vertpos', models.PositiveSmallIntegerField(default=100, help_text='The vertical position of the preloader.', verbose_name='preloader vertical position')),
                ('theme_appearance_order', models.CharField(choices=[('normal', 'Normal'), ('shuffle', 'Shuffle'), ('keep', 'Keep order')], default='normal', help_text='The appearance order of the tiles.', max_length=8, verbose_name='appearance order')),
                ('tiles_enable_transition', models.BooleanField(default=True, help_text='enable transition on screen width change.', verbose_name='enable transition')),
                ('tiles_space_between_cols', models.PositiveSmallIntegerField(default=3, verbose_name='space between images')),
                ('tiles_space_between_cols_mobile', models.PositiveSmallIntegerField(default=3, help_text='Space between cols for mobile type.', verbose_name='space between images (mobile)')),
                ('tiles_min_columns', models.PositiveSmallIntegerField(default=2, help_text='Maximum number of columns, for mobile size.', verbose_name='min columns')),
                ('tiles_set_initial_height', models.BooleanField(default=True, help_text='Columns type related only.', verbose_name='set initial height')),
                ('tiles_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='Alignment of the tiles in the space.', max_length=6, verbose_name='align')),
                ('tiles_col_width', models.PositiveSmallIntegerField(default=250, help_text='Column width. Exact or base according the settings.', verbose_name='column width')),
                ('tiles_exact_width', models.BooleanField(default=False, help_text='Exact width of column. Disables the min and max columns.', verbose_name='exact width')),
                ('tiles_include_padding', models.BooleanField(default=True, help_text='Include padding at the sides of the columns, equal to current space between cols.', verbose_name='include padding')),
                ('tiles_max_columns', models.PositiveSmallIntegerField(default=0, help_text='Maximum number of columns (0 for unlimited).', verbose_name='maximum columns')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=0, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=False, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=False, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Tiles - Columns unite options',
                'verbose_name_plural': 'Tiles - Columns unite options',
            },
        ),
        migrations.CreateModel(
            name='TilesGridPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_tilesgridplugin', serialize=False, to='cms.CMSPlugin')),
                ('tile_height', models.PositiveSmallIntegerField(default=150, verbose_name='tile height')),
                ('tile_width', models.PositiveSmallIntegerField(default=180, verbose_name='tile height')),
                ('grid_padding', models.PositiveSmallIntegerField(default=10, verbose_name='tile height')),
                ('grid_space_between_cols', models.PositiveSmallIntegerField(default=20, verbose_name='space between columns')),
                ('grid_space_between_rows', models.PositiveSmallIntegerField(default=20, verbose_name='space between rows')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_auto_open', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Auto open lightbox at start. If some number gived, like 0.', null=True, verbose_name='auto open')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('theme_navigation_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='The align of the navigation.', max_length=6, verbose_name='navigation align')),
                ('theme_navigation_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='horizontal offset')),
                ('theme_space_between_arrows', models.PositiveSmallIntegerField(default=5, help_text='The space between arrows in the navigation.', verbose_name='space between arrows')),
                ('bullets_space_between', models.PositiveSmallIntegerField(default=12, verbose_name='space between bullets')),
                ('grid_num_rows', models.PositiveSmallIntegerField(default=3, help_text='Maximum number of grid rows. If set to big value, the navigation will not appear.', verbose_name='number of rows')),
                ('theme_arrows_margin_top', models.PositiveSmallIntegerField(default=20, help_text='The space between arrows and grid.', verbose_name='arrows top margin')),
                ('theme_bullets_color', models.CharField(choices=[('gray', 'Gray'), ('blue', 'Blue'), ('brown', 'Brown'), ('green', 'Green'), ('red', 'Red')], default='gray', max_length=6, verbose_name='bullet color')),
                ('theme_bullets_margin_top', models.PositiveSmallIntegerField(default=40, help_text='The space between bullets and grid.', verbose_name='bullets top margin')),
                ('theme_navigation_type', models.CharField(choices=[('bullets', 'Bullets'), ('arrows', 'Arrows')], default='bullets', help_text='The vertical position of the navigation reative to the carousel.', max_length=7, verbose_name='navigation type')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=2, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=True, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=False, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tilesgrid_unite_plugins_full', related_query_name='tilesgrid_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Tiles - Grid plugin',
                'verbose_name_plural': 'Tiles - Grid plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='TilesGridSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tile_height', models.PositiveSmallIntegerField(default=150, verbose_name='tile height')),
                ('tile_width', models.PositiveSmallIntegerField(default=180, verbose_name='tile height')),
                ('grid_padding', models.PositiveSmallIntegerField(default=10, verbose_name='tile height')),
                ('grid_space_between_cols', models.PositiveSmallIntegerField(default=20, verbose_name='space between columns')),
                ('grid_space_between_rows', models.PositiveSmallIntegerField(default=20, verbose_name='space between rows')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_auto_open', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Auto open lightbox at start. If some number gived, like 0.', null=True, verbose_name='auto open')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('theme_navigation_align', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='center', help_text='The align of the navigation.', max_length=6, verbose_name='navigation align')),
                ('theme_navigation_offset_hor', models.PositiveSmallIntegerField(default=0, verbose_name='horizontal offset')),
                ('theme_space_between_arrows', models.PositiveSmallIntegerField(default=5, help_text='The space between arrows in the navigation.', verbose_name='space between arrows')),
                ('bullets_space_between', models.PositiveSmallIntegerField(default=12, verbose_name='space between bullets')),
                ('grid_num_rows', models.PositiveSmallIntegerField(default=3, help_text='Maximum number of grid rows. If set to big value, the navigation will not appear.', verbose_name='number of rows')),
                ('theme_arrows_margin_top', models.PositiveSmallIntegerField(default=20, help_text='The space between arrows and grid.', verbose_name='arrows top margin')),
                ('theme_bullets_color', models.CharField(choices=[('gray', 'Gray'), ('blue', 'Blue'), ('brown', 'Brown'), ('green', 'Green'), ('red', 'Red')], default='gray', max_length=6, verbose_name='bullet color')),
                ('theme_bullets_margin_top', models.PositiveSmallIntegerField(default=40, help_text='The space between bullets and grid.', verbose_name='bullets top margin')),
                ('theme_navigation_type', models.CharField(choices=[('bullets', 'Bullets'), ('arrows', 'Arrows')], default='bullets', help_text='The vertical position of the navigation reative to the carousel.', max_length=7, verbose_name='navigation type')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=2, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=True, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=False, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Tiles - Grid unite options',
                'verbose_name_plural': 'Tiles - Grid unite options',
            },
        ),
        migrations.CreateModel(
            name='TilesJustifiedPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_tilesjustifiedplugin', serialize=False, to='cms.CMSPlugin')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_auto_open', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Auto open lightbox at start. If some number gived, like 0.', null=True, verbose_name='auto open')),
                ('theme_enable_preloader', models.BooleanField(default=True, help_text='Enable preloader circle.', verbose_name='enable preloader')),
                ('theme_preloading_height', models.PositiveSmallIntegerField(default=200, help_text='The height of the preloading div, it is shown before the gallery.', verbose_name='preloading height')),
                ('theme_preloader_vertpos', models.PositiveSmallIntegerField(default=100, help_text='The vertical position of the preloader.', verbose_name='preloader vertical position')),
                ('tiles_enable_transition', models.BooleanField(default=True, help_text='enable transition on screen width change.', verbose_name='enable transition')),
                ('tiles_set_initial_height', models.BooleanField(default=True, help_text='Columns type related only.', verbose_name='set initial height')),
                ('tiles_justified_row_height', models.PositiveSmallIntegerField(default=150, help_text='Base row height of the justified type.', verbose_name='row height')),
                ('tiles_justified_space_between', models.PositiveSmallIntegerField(default=3, help_text='Space between the tiles justified type.', verbose_name='space between')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=0, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=False, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=False, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tilesjustified_unite_plugins_full', related_query_name='tilesjustified_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Tiles - Justified plugin',
                'verbose_name_plural': 'Tiles - Justified plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='TilesJustifiedSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_auto_open', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Auto open lightbox at start. If some number gived, like 0.', null=True, verbose_name='auto open')),
                ('theme_enable_preloader', models.BooleanField(default=True, help_text='Enable preloader circle.', verbose_name='enable preloader')),
                ('theme_preloading_height', models.PositiveSmallIntegerField(default=200, help_text='The height of the preloading div, it is shown before the gallery.', verbose_name='preloading height')),
                ('theme_preloader_vertpos', models.PositiveSmallIntegerField(default=100, help_text='The vertical position of the preloader.', verbose_name='preloader vertical position')),
                ('tiles_enable_transition', models.BooleanField(default=True, help_text='enable transition on screen width change.', verbose_name='enable transition')),
                ('tiles_set_initial_height', models.BooleanField(default=True, help_text='Columns type related only.', verbose_name='set initial height')),
                ('tiles_justified_row_height', models.PositiveSmallIntegerField(default=150, help_text='Base row height of the justified type.', verbose_name='row height')),
                ('tiles_justified_space_between', models.PositiveSmallIntegerField(default=3, help_text='Space between the tiles justified type.', verbose_name='space between')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=0, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=False, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=False, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Tiles - Justified unite options',
                'verbose_name_plural': 'Tiles - Justified unite options',
            },
        ),
        migrations.CreateModel(
            name='TilesNestedPlugin',
            fields=[
                ('cmsplugin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='djangocms_aoxomoxoa_tilesnestedplugin', serialize=False, to='cms.CMSPlugin')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_auto_open', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Auto open lightbox at start. If some number gived, like 0.', null=True, verbose_name='auto open')),
                ('theme_enable_preloader', models.BooleanField(default=True, help_text='Enable preloader circle.', verbose_name='enable preloader')),
                ('theme_preloading_height', models.PositiveSmallIntegerField(default=200, help_text='The height of the preloading div, it is shown before the gallery.', verbose_name='preloading height')),
                ('theme_preloader_vertpos', models.PositiveSmallIntegerField(default=100, help_text='The vertical position of the preloader.', verbose_name='preloader vertical position')),
                ('tiles_enable_transition', models.BooleanField(default=True, help_text='enable transition on screen width change.', verbose_name='enable transition')),
                ('tiles_space_between_cols', models.PositiveSmallIntegerField(default=3, verbose_name='space between images')),
                ('tiles_space_between_cols_mobile', models.PositiveSmallIntegerField(default=3, help_text='Space between cols for mobile type.', verbose_name='space between images (mobile)')),
                ('tiles_min_columns', models.PositiveSmallIntegerField(default=2, help_text='Maximum number of columns, for mobile size.', verbose_name='min columns')),
                ('tiles_nested_optimal_tile_width', models.PositiveSmallIntegerField(default=250, verbose_name='optimal_tile_width')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=0, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=False, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=False, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('slug', models.SlugField(verbose_name='slug')),
                ('attributes', djangocms_attributes_field.fields.AttributesField(blank=True, default=dict, verbose_name='Attributes')),
                ('full_thumbnail_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tilesnested_unite_plugins_full', related_query_name='tilesnested_unite_plugin_full', to='filer.ThumbnailOption', verbose_name='fullscreen thumbnail option')),
            ],
            options={
                'verbose_name': 'Tiles - Nested plugin',
                'verbose_name_plural': 'Tiles - Nested plugins',
            },
            bases=('cms.cmsplugin', models.Model),
        ),
        migrations.CreateModel(
            name='TilesNestedSavedUniteOptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme_gallery_padding', models.PositiveSmallIntegerField(default=0, help_text='The horizontal padding of the gallery from the sides.', verbose_name='gallery padding')),
                ('theme_auto_open', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Auto open lightbox at start. If some number gived, like 0.', null=True, verbose_name='auto open')),
                ('theme_enable_preloader', models.BooleanField(default=True, help_text='Enable preloader circle.', verbose_name='enable preloader')),
                ('theme_preloading_height', models.PositiveSmallIntegerField(default=200, help_text='The height of the preloading div, it is shown before the gallery.', verbose_name='preloading height')),
                ('theme_preloader_vertpos', models.PositiveSmallIntegerField(default=100, help_text='The vertical position of the preloader.', verbose_name='preloader vertical position')),
                ('tiles_enable_transition', models.BooleanField(default=True, help_text='enable transition on screen width change.', verbose_name='enable transition')),
                ('tiles_space_between_cols', models.PositiveSmallIntegerField(default=3, verbose_name='space between images')),
                ('tiles_space_between_cols_mobile', models.PositiveSmallIntegerField(default=3, help_text='Space between cols for mobile type.', verbose_name='space between images (mobile)')),
                ('tiles_min_columns', models.PositiveSmallIntegerField(default=2, help_text='Maximum number of columns, for mobile size.', verbose_name='min columns')),
                ('tiles_nested_optimal_tile_width', models.PositiveSmallIntegerField(default=250, verbose_name='optimal_tile_width')),
                ('gallery_background_color', colorfield.fields.ColorField(blank=True, default='', help_text='set custom background color. If not set it will be taken from css.', max_length=18, verbose_name='background color')),
                ('gallery_min_width', models.PositiveSmallIntegerField(default=150, help_text='Gallery minimum width when resizing.', verbose_name='minimum width')),
                ('gallery_width', models.CharField(default='100%', help_text='Gallery width.', max_length=8, verbose_name='width')),
                ('lightbox_type', models.CharField(choices=[('compact', 'Compact'), ('wide', 'Wide')], default='wide', max_length=7, verbose_name='lightbox type')),
                ('lightbox_hide_arrows_onvideoplay', models.BooleanField(default=True, help_text='Hide the arrows when a video starts playing and show them when it stops.', verbose_name='hide arrows during video play')),
                ('lightbox_arrows_position', models.CharField(choices=[('sides', 'Sides'), ('inside', 'Inside')], default='sides', help_text='Position of the arrows, used on compact type.', max_length=6, verbose_name='lightbox type')),
                ('lightbox_arrows_offset', models.PositiveSmallIntegerField(default=10, help_text='The horizontal offset of the arrows.', verbose_name='arrows offset')),
                ('lightbox_arrows_inside_offset', models.PositiveSmallIntegerField(default=10, help_text='The offset from the image border if the arrows are placed inside.', verbose_name='arrows inside offset')),
                ('lightbox_arrows_inside_alwayson', models.BooleanField(default=False, help_text='Show the arrows on mouseover, or always on.', verbose_name='arrows always on')),
                ('lightbox_overlay_color', colorfield.fields.ColorField(blank=True, default='', help_text='The color of the overlay. If null - will take from CSS.', max_length=18, verbose_name='overlay color')),
                ('lightbox_overlay_opacity', models.PositiveSmallIntegerField(default=100, help_text='The opacity of the overlay. for compact type 60%.', validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('lightbox_top_panel_opacity', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The opacity of the top panel.', null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='top panel opacity (%)')),
                ('lightbox_close_on_emptyspace', models.BooleanField(default=False, verbose_name='close on empty space')),
                ('lightbox_show_numbers', models.BooleanField(default=True, help_text='Show numbers on the right side.', verbose_name='show numbers')),
                ('lightbox_numbers_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The size of the numbers string.', null=True, verbose_name='numbers size')),
                ('lightbox_numbers_color', colorfield.fields.ColorField(blank=True, default='', max_length=18, verbose_name='numbers color')),
                ('lightbox_numbers_padding_top', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The top padding of the numbers (used in compact mode).', null=True, verbose_name='numbers top padding')),
                ('lightbox_numbers_padding_right', models.PositiveSmallIntegerField(blank=True, default=None, help_text='The right padding of the numbers (used in compact mode).', null=True, verbose_name='numbers right padding')),
                ('lightbox_slider_image_border', models.BooleanField(default=True, help_text='Enable border around the image (for compact type only).', verbose_name='slider image border')),
                ('lightbox_slider_image_border_width', models.PositiveSmallIntegerField(default=10, help_text='Image border width.', verbose_name='image border width')),
                ('lightbox_slider_image_border_color', colorfield.fields.ColorField(default='#FFFFFF', max_length=18, verbose_name='image border color')),
                ('lightbox_slider_image_border_radius', models.PositiveSmallIntegerField(default=0, verbose_name='image border radius')),
                ('lightbox_slider_image_shadow', models.BooleanField(default=True, verbose_name='slider image shadow')),
                ('lightbox_slider_control_swipe', models.BooleanField(default=True, help_text='Enable swiping control.', verbose_name='slider control swipe')),
                ('lightbox_slider_control_zoom', models.BooleanField(default=True, help_text='Enable zooming control.', verbose_name='slider control zoom')),
                ('tile_as_link', models.BooleanField(default=False, help_text='Make the tile act the tile as a link, no lightbox will appear.', verbose_name='act as link')),
                ('tile_border_color', colorfield.fields.ColorField(default='#F0F0F0', max_length=18, verbose_name='border color')),
                ('tile_border_radius', models.PositiveSmallIntegerField(default=0, help_text='Tile border radius (applied to border only, not to outline).', verbose_name='border radius')),
                ('tile_border_width', models.PositiveSmallIntegerField(default=3, help_text='Tile border width.', verbose_name='border width')),
                ('tile_enable_action', models.BooleanField(default=True, help_text='Enable tile action on click like lightbox.', verbose_name='enable action')),
                ('tile_enable_border', models.BooleanField(default=False, help_text='Enable border of the tile.', verbose_name='enable border')),
                ('tile_enable_icons', models.BooleanField(default=True, help_text='Enable icons in mouseover mode.', verbose_name='enable icons')),
                ('tile_enable_image_effect', models.BooleanField(default=False, verbose_name='enable image effect')),
                ('tile_enable_outline', models.BooleanField(default=False, help_text='Enable outline of the tile (works only together with the border).', verbose_name='enable outline')),
                ('tile_enable_overlay', models.BooleanField(default=True, help_text='Enable tile color overlay (on mouseover).', verbose_name='enable overlay')),
                ('tile_enable_shadow', models.BooleanField(default=True, help_text='Enable shadow of the tile.', verbose_name='enable shadow')),
                ('tile_image_effect_reverse', models.BooleanField(default=False, help_text='Reverce the image, set only on mouseover state.', verbose_name='enable effect reverse')),
                ('tile_image_effect_type', models.CharField(choices=[('bw', 'Black and white'), ('blur', 'Blur'), ('sepia', 'Sepia')], default='bw', max_length=16, verbose_name='image effect type')),
                ('tile_link_newpage', models.BooleanField(default=True, help_text='Open the tile link in new page.', verbose_name='link newpage')),
                ('tile_outline_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='outline color')),
                ('tile_overlay_color', colorfield.fields.ColorField(default='#000000', help_text='Tile overlay color.', max_length=18, verbose_name='overlay color')),
                ('tile_overlay_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='overlay opacity (%)')),
                ('tile_shadow_blur', models.PositiveSmallIntegerField(default=3, help_text='Shadow blur.', verbose_name='shadow blur')),
                ('tile_shadow_color', colorfield.fields.ColorField(default='#8B8B8B', max_length=18, verbose_name='shadow color')),
                ('tile_shadow_h', models.PositiveSmallIntegerField(default=1, help_text='Position of horizontal shadow.', verbose_name='shadow horizontal offset')),
                ('tile_shadow_spread', models.PositiveSmallIntegerField(default=2, verbose_name='shadow spread')),
                ('tile_shadow_v', models.PositiveSmallIntegerField(default=1, help_text='Position of vertical shadow.', verbose_name='shadow vertical offset')),
                ('tile_show_link_icon', models.BooleanField(default=False, help_text='show link icon (if the tile has a link). In case of tile_as_link this option not enabled.', verbose_name='show link icon')),
                ('tile_space_between_icons', models.PositiveSmallIntegerField(default=26, help_text='Initial space between icons, (on small tiles it may change).', verbose_name='space between icons')),
                ('tile_enable_textpanel', models.BooleanField(default=False, verbose_name='enable')),
                ('tile_textpanel_always_on', models.BooleanField(default=False, verbose_name='always on')),
                ('tile_textpanel_appear_type', models.CharField(choices=[('slide', 'Slide'), ('fade', 'Fade')], default='slide', help_text='Appear type of the textpanel on mouseover.', max_length=5, verbose_name='appear type')),
                ('tile_textpanel_bg_color', colorfield.fields.ColorField(default='#000000', max_length=18, verbose_name='background color')),
                ('tile_textpanel_bg_css', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel background CSS.', verbose_name='background CSS')),
                ('tile_textpanel_bg_opacity', models.PositiveSmallIntegerField(default=40, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='background opacity (%)')),
                ('tile_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Description additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Title additional CSS.', verbose_name='description CSS')),
                ('tile_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('tile_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from css.', max_length=18, verbose_name='description color')),
                ('tile_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('tile_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('tile_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('tile_textpanel_offset', models.PositiveSmallIntegerField(default=0, verbose_name='vertical offset')),
                ('tile_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=8, verbose_name='bottom padding')),
                ('tile_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('tile_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('tile_textpanel_padding_top', models.PositiveSmallIntegerField(default=8, verbose_name='top padding')),
                ('tile_textpanel_position', models.CharField(choices=[('inside_bottom', 'Inside bottom'), ('inside_top', 'Inside top'), ('inside_center', 'Inside center'), ('top', 'Top'), ('bottom', 'Bottom')], default='bottom', help_text='The position of the textpanel.', max_length=13, verbose_name='text panel position')),
                ('tile_textpanel_source', models.CharField(choices=[('title', 'Title'), ('desc', 'Description'), ('desc_title', 'Description or title')], default='title', help_text='Source of the textpanel.', max_length=10, verbose_name='text panel source')),
                ('tile_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='bold title')),
                ('tile_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('tile_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='title font family')),
                ('tile_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from CSS.', null=True, verbose_name='title font size (px)')),
                ('tile_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='title text alignment')),
                ('lightbox_show_textpanel', models.BooleanField(default=True, help_text='Show the text panel.', verbose_name='show text panel')),
                ('lightbox_textpanel_css_description', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the description.', verbose_name='description CSS')),
                ('lightbox_textpanel_css_title', djangocms_attributes_field.fields.AttributesField(blank=True, default={}, help_text='Textpanel additional CSS of the title.', verbose_name='title CSS')),
                ('lightbox_textpanel_desc_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_desc_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel description text color. If blank take from CSS.', max_length=18, verbose_name='description color')),
                ('lightbox_textpanel_desc_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the description.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_desc_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel description font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_desc_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel description text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_enable_description', models.BooleanField(default=False, help_text='Enable the description text.', verbose_name='enable description')),
                ('lightbox_textpanel_enable_title', models.BooleanField(default=True, help_text='Enable the title text.', verbose_name='enable title')),
                ('lightbox_textpanel_padding_bottom', models.PositiveSmallIntegerField(default=5, help_text='Textpanel bottom padding.', verbose_name='bottom padding')),
                ('lightbox_textpanel_padding_left', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from left.', verbose_name='left padding')),
                ('lightbox_textpanel_padding_right', models.PositiveSmallIntegerField(default=11, help_text='Cut some space for text from right.', verbose_name='right padding')),
                ('lightbox_textpanel_padding_top', models.PositiveSmallIntegerField(default=5, help_text='Textpanel top padding.', verbose_name='top padding')),
                ('lightbox_textpanel_title_bold', models.NullBooleanField(default=None, verbose_name='Bold description')),
                ('lightbox_textpanel_title_color', colorfield.fields.ColorField(blank=True, default='', help_text='Textpanel title color. If blank take from CSS.', max_length=18, verbose_name='title color')),
                ('lightbox_textpanel_title_font_family', models.CharField(blank=True, default='', help_text='A CSS font family for the title.', max_length=255, verbose_name='description font family')),
                ('lightbox_textpanel_title_font_size', models.PositiveSmallIntegerField(blank=True, default=None, help_text='Textpanel title font size. If blank take from css.', null=True, verbose_name='description font size (px)')),
                ('lightbox_textpanel_title_text_align', models.CharField(blank=True, choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='', help_text='Textpanel title text alignment. If blank take from CSS.', max_length=6, verbose_name='description text alignment')),
                ('lightbox_textpanel_width', models.PositiveSmallIntegerField(default=550, help_text='the width of the text panel. wide type only.', verbose_name='width')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Tiles - Nested unite options',
                'verbose_name_plural': 'Tiles - Nested unite options',
            },
        ),
        migrations.AddField(
            model_name='tilesnestedplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.TilesNestedSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='tilesnestedplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tilesnested_unite_plugins_thumbnail', related_query_name='tilesnested_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
        migrations.AddField(
            model_name='tilesjustifiedplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.TilesJustifiedSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='tilesjustifiedplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tilesjustified_unite_plugins_thumbnail', related_query_name='tilesjustified_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
        migrations.AddField(
            model_name='tilesgridplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.TilesGridSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='tilesgridplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tilesgrid_unite_plugins_thumbnail', related_query_name='tilesgrid_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
        migrations.AddField(
            model_name='tilescolumnsplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.TilesColumnsSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='tilescolumnsplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tilescolumns_unite_plugins_thumbnail', related_query_name='tilescolumns_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
        migrations.AddField(
            model_name='sliderplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.SliderSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='sliderplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slider_unite_plugins_thumbnail', related_query_name='slider_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
        migrations.AddField(
            model_name='gridthemeplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.GridThemeSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='gridthemeplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gridtheme_unite_plugins_thumbnail', related_query_name='gridtheme_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
        migrations.AddField(
            model_name='defaultthemeplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.DefaultThemeSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='defaultthemeplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defaulttheme_unite_plugins_thumbnail', related_query_name='defaulttheme_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
        migrations.AddField(
            model_name='compactthemeplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.CompactThemeSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='compactthemeplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compacttheme_unite_plugins_thumbnail', related_query_name='compacttheme_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
        migrations.AddField(
            model_name='carouselplugin',
            name='saved_conf',
            field=models.ForeignKey(blank=True, help_text='Override the unite options with the values from the selected saved configuration.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', related_query_name='instance', to='djangocms_aoxomoxoa.CarouselSavedUniteOptions', verbose_name='saved configuration'),
        ),
        migrations.AddField(
            model_name='carouselplugin',
            name='thumbnail_thumbnail_option',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carousel_unite_plugins_thumbnail', related_query_name='carousel_unite_plugin_thumbnail', to='filer.ThumbnailOption', verbose_name='thumbnail thumbnail option'),
        ),
    ]
